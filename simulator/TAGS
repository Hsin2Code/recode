
client_simulator/src/VrvProtocol.cpp,408
DWORD m_EncryptVersion 21,244
BYTE m_Key[m_Key22,298
BOOL Encrypt_V1(32,469
BOOL Decrypt_V1(60,1143
ULONG	    CRCTab[CRCTab68,1469
void CRCInit(69,1492
ULONG CRC32(84,1698
ULONG CRC32Raw(96,1908
int VRVPacket::SendPkt(109,2175
int VRVPacket::sent_audit_info(168,3690
int VRVPacket::RecvPkt(200,4782
int VRVPacketEx::SendPktEx(249,5990
int VRVPacketEx::RecvPktEx(308,7651
int get_pwd(354,8833

client_simulator/src/pull_policy.cpp,3320
struct tag_S_GetPlockyGEN 10,193
    void * pSendStr tag_S_GetPlockyGEN::pSendStr11,221
    void * pGetStr;tag_S_GetPlockyGEN::pGetStr12,243
    tag_S_GetPlockyGEN(tag_S_GetPlockyGEN::tag_S_GetPlockyGEN13,263
struct tag_vrv_policyGen 21,367
    int id tag_vrv_policyGen::id22,394
    string func tag_vrv_policyGen::func23,409
    unsigned int crc tag_vrv_policyGen::crc24,427
    int    type tag_vrv_policyGen::type25,450
    int flg tag_vrv_policyGen::flg26,468
    tag_vrv_policyGen(tag_vrv_policyGen::tag_vrv_policyGen27,483
enum  enPolicytype 37,608
    SOFT_INSTALL_CTRL,enPolicytype::SOFT_INSTALL_CTRL39,655
    PROCESS_CTRL,enPolicytype::PROCESS_CTRL41,698
    IPMAC_BIND_CTRL,enPolicytype::IPMAC_BIND_CTRL43,738
    SOFT_DOWN_CTRL,enPolicytype::SOFT_DOWN_CTRL45,767
    ONLINE_DEAL_CTRL,enPolicytype::ONLINE_DEAL_CTRL47,807
    UDISK_ACT_CTRL,enPolicytype::UDISK_ACT_CTRL49,837
    PORT_PROTECT_CTRL,enPolicytype::PORT_PROTECT_CTRL51,877
    DEV_INSTALL_CTRL,enPolicytype::DEV_INSTALL_CTRL53,926
    FILE_PROTECT_CTRL,enPolicytype::FILE_PROTECT_CTRL55,974
    HTTP_VISIT_CTRL,enPolicytype::HTTP_VISIT_CTRL57,1023
    POLICY_SEC_BURN,enPolicytype::POLICY_SEC_BURN59,1052
    FILE_OP_CTRL,enPolicytype::FILE_OP_CTRL61,1099
    POLICY_ENCRYPTION,enPolicytype::POLICY_ENCRYPTION63,1137
    HTTP_ACCESS_CTRL,enPolicytype::HTTP_ACCESS_CTRL65,1184
    POLICY_AUTO_SHUTDOWN,enPolicytype::POLICY_AUTO_SHUTDOWN67,1214
    FILE_CHECKSUM_EDIT,enPolicytype::FILE_CHECKSUM_EDIT69,1263
    SERVICE_CTRL,enPolicytype::SERVICE_CTRL71,1307
    SYSTEM_CONN_MONITOR,enPolicytype::SYSTEM_CONN_MONITOR73,1345
    VIRTUAL_MACHINE_CHECK,enPolicytype::VIRTUAL_MACHINE_CHECK75,1393
    CLI_FLOW_CTRL,enPolicytype::CLI_FLOW_CTRL77,1449
    USER_RIGHT_POLICY,enPolicytype::USER_RIGHT_POLICY79,1494
    HOST_CFG_EDIT,enPolicytype::HOST_CFG_EDIT81,1543
    VIOLATION_ACT_CHK,enPolicytype::VIOLATION_ACT_CHK83,1588
    RUN_INFOMATION,enPolicytype::RUN_INFOMATION85,1631
    CONNECT_GATEWAY_AFFIRM,enPolicytype::CONNECT_GATEWAY_AFFIRM87,1659
    POLICY_HEALTHCHECK,enPolicytype::POLICY_HEALTHCHECK89,1695
    en_policytype_count,enPolicytype::en_policytype_count90,1719
const char * policy_target[policy_target94,1749
enPolicytype typefromTartget(106,2790
static int  get_pkt_app_info(116,3039
static bool _send_policy_genenral(146,4168
#define POLICY_COUNT_TAG 190,5213
void  trimstring(192,5249
std::string  get_tag_val(201,5443
int    get_policylist_fromGeneral(219,5957
static bool _send_policy_detail(300,8305
#define    POLICY_END_TAG 341,9329
bool get_PolicyContent(343,9372
bool _contain_file_policy(364,9988
void  _log_policy_breif(384,10631
typedef struct file_thr_args 409,11669
    pthread_t *thread_id;file_thr_args::thread_id410,11700
    std::string *policy_content;file_thr_args::policy_content411,11726
    file_thr_args(file_thr_args::file_thr_args412,11759
}file_thr_args_t;file_thr_args_t416,11844
pthread_t *g_running_file_tid_ptr g_running_file_tid_ptr418,11863
int policy_pull_success_times 420,11906
int policy_pull_falied_times 421,11941
void *file_sfd_thr_cb(file_sfd_thr_cb423,11976
bool on_Update_pGeneral(439,12360
static bool _get_policy_info(521,15478
void *pull_policy_worker(pull_policy_worker552,16418

client_simulator/src/simulator.cpp,326
#define UNUSED(16,302
static bool quit_flags 18,331
static pthread_t hb_thr 19,363
static pthread_t pull_policy_thr 20,392
static pthread_t send_thr 21,430
static int toggle_report_assert 22,461
static int random_wait_sec 23,498
void sig_action(25,532
void usage(96,2796
void init_logger(115,3591
int main(143,4860

client_simulator/src/socket.cpp,320
CommonSocket::CommonSocket(4,46
int CommonSocket::socket_id(11,204
int CommonSocket::open(19,370
int CommonSocket::close(31,644
TCP::TCP(44,886
TCP::TCP(49,1086
string TCP::ip(56,1370
uint16_t TCP::port(59,1446
uint32_t TCP::passwd(62,1522
struct sockaddr_in TCP::sockaddr_in(69,1684
int TCP::connect(72,1761

client_simulator/src/CSoftInstallHelper.cpp,460
#define  SINSTALL_TMP_FILE 20,312
std::string ins_soft_hash(23,380
struct install_time41,805
    char date[install_time::date43,827
    char day[install_time::day44,847
    char time[install_time::time45,866
static  int  get_soft_info(48,891
CSoftInstallHelper::CSoftInstallHelper(228,6180
CSoftInstallHelper::~CSoftInstallHelper(233,6228
int get_rpm_all(238,6277
bool  CSoftInstallHelper::Init(251,6600
void  CSoftInstallHelper::Check(273,6982

client_simulator/src/old_functions.cpp,100
bool conn_serv(9,156
void closeSocket(62,1569
void close_socket(79,2087
int getSO_ERROR(89,2299

client_simulator/src/Markup.cpp,16606
#define x_ATTRIBQUOTE 20,551
#undef THIS_FILE35,1241
static char THIS_FILE[THIS_FILE36,1259
#define new 38,1318
void x_StrInsertReplace(51,1650
int x_Hash(78,2857
MCD_STR x_IntToStr(86,2985
int x_StrNCmp(94,3111
enum MarkupResultCode133,3839
	MRC_COUNT MarkupResultCode::MRC_COUNT135,3865
	MRC_TYPE MarkupResultCode::MRC_TYPE136,3885
	MRC_NUMBER MarkupResultCode::MRC_NUMBER137,3905
	MRC_ENCODING MarkupResultCode::MRC_ENCODING138,3925
	MRC_LENGTH MarkupResultCode::MRC_LENGTH139,3945
	MRC_MODIFY MarkupResultCode::MRC_MODIFY140,3966
	MRC_MSG MarkupResultCode::MRC_MSG141,3987
void x_AddResult(144,4013
struct TextEncoding183,5443
	TextEncoding(TextEncoding::TextEncoding185,5467
	MCD_STR m_strToEncoding;TextEncoding::m_strToEncoding202,6125
	MCD_STR m_strFromEncoding;TextEncoding::m_strFromEncoding203,6152
	const void* m_pFrom;TextEncoding::m_pFrom204,6181
	int m_nFromLen;TextEncoding::m_nFromLen205,6204
	int m_nToCount;TextEncoding::m_nToCount206,6222
	int m_nFailedChars;TextEncoding::m_nFailedChars207,6240
MCD_PCSZ EncodingNameTable[EncodingNameTable215,6561
int x_GetEncodingCodePage(332,14324
bool TextEncoding::CanConvert(375,15741
const char* TextEncoding::IConvName(411,16887
int TextEncoding::IConv(430,17489
bool x_NoDefaultChar(499,19776
int TextEncoding::PerformConversion(507,20137
bool TextEncoding::FindRaggedEnd(766,27693
bool x_EndianSwapRequired(889,32678
void x_EndianSwapUTF16(903,32970
struct ElemPos917,33367
	ElemPos(ElemPos::ElemPos919,33386
	ElemPos(ElemPos::ElemPos920,33402
	int StartTagLen(ElemPos::StartTagLen921,33452
	void SetStartTagLen(ElemPos::SetStartTagLen922,33504
	void AdjustStartTagLen(ElemPos::AdjustStartTagLen923,33558
	int EndTagLen(ElemPos::EndTagLen924,33616
	void SetEndTagLen(ElemPos::SetEndTagLen925,33664
	bool IsEmptyElement(ElemPos::IsEmptyElement926,33714
	int StartContent(ElemPos::StartContent927,33787
	int ContentLen(ElemPos::ContentLen928,33850
	int StartAfter(ElemPos::StartAfter929,33926
    int Level(ElemPos::Level930,33981
    void SetLevel(ElemPos::SetLevel931,34033
	void ClearVirtualParent(ElemPos::ClearVirtualParent932,34105
	void SetEndTagLenUnparsed(ElemPos::SetEndTagLenUnparsed933,34170
	bool IsUnparsed(ElemPos::IsUnparsed934,34222
	int nStart;ElemPos::nStart937,34322
	int nLength;ElemPos::nLength938,34336
	unsigned int nStartTagLen ElemPos::nStartTagLen939,34351
	unsigned int nEndTagLen ElemPos::nEndTagLen940,34412
    int nFlags;ElemPos::nFlags941,34468
	int iElemParent;ElemPos::iElemParent942,34535
	int iElemChild;ElemPos::iElemChild943,34554
	int iElemNext;ElemPos::iElemNext944,34587
	int iElemPrev;ElemPos::iElemPrev945,34620
enum MarkupNodeFlagsInternal2948,34689
	MNF_REPLACE MarkupNodeFlagsInternal2::MNF_REPLACE950,34723
	MNF_REPLACE    = 0x001000,MarkupNodeFlagsInternal2::x001000950,34723
	MNF_QUOTED MarkupNodeFlagsInternal2::MNF_QUOTED951,34752
	MNF_QUOTED     = 0x008000,MarkupNodeFlagsInternal2::x008000951,34752
	MNF_EMPTY MarkupNodeFlagsInternal2::MNF_EMPTY952,34781
	MNF_EMPTY      = 0x010000,MarkupNodeFlagsInternal2::x010000952,34781
	MNF_DELETED MarkupNodeFlagsInternal2::MNF_DELETED953,34810
	MNF_DELETED    = 0x020000,MarkupNodeFlagsInternal2::x020000953,34810
	MNF_FIRST MarkupNodeFlagsInternal2::MNF_FIRST954,34839
	MNF_FIRST      = 0x080000,MarkupNodeFlagsInternal2::x080000954,34839
	MNF_PUBLIC MarkupNodeFlagsInternal2::MNF_PUBLIC955,34868
	MNF_PUBLIC     = 0x300000,MarkupNodeFlagsInternal2::x300000955,34868
	MNF_ILLFORMED MarkupNodeFlagsInternal2::MNF_ILLFORMED956,34897
	MNF_ILLFORMED  = 0x800000,MarkupNodeFlagsInternal2::x800000956,34897
	MNF_USER MarkupNodeFlagsInternal2::MNF_USER957,34926
	MNF_USER      = 0xf000000MarkupNodeFlagsInternal2::xf000000957,34926
struct ElemPosTree960,34960
	ElemPosTree(ElemPosTree::ElemPosTree962,34983
	~ElemPosTree(ElemPosTree::~ElemPosTree963,35013
	enum { PA_SEGBITS ElemPosTree::PA_SEGBITS964,35046
	enum { PA_SEGBITS = 16, PA_SEGMASK ElemPosTree::PA_SEGMASK964,35046
	enum { PA_SEGBITS = 16, PA_SEGMASK = 0xffff ElemPosTree::xffff964,35046
	void ReleaseElemPosTree(ElemPosTree::ReleaseElemPosTree965,35095
	void Release(ElemPosTree::Release966,35148
	void Clear(ElemPosTree::Clear967,35267
	int GetSize(ElemPosTree::GetSize968,35323
	int SegsUsed(ElemPosTree::SegsUsed969,35366
	ElemPos& GetRefElemPosAt(ElemPosTree::GetRefElemPosAt970,35432
	ElemPos** m_pSegs;ElemPosTree::m_pSegs974,35630
	int m_nSize;ElemPosTree::m_nSize975,35651
	int m_nSegs;ElemPosTree::m_nSegs976,35666
void ElemPosTree::CopyElemPosTree(979,35687
void ElemPosTree::GrowElemPosTree(1000,36268
#define ELEM(1059,38140
struct NodePos1064,38363
	NodePos(NodePos::NodePos1066,38382
	NodePos(NodePos::NodePos1067,38398
	int nNodeType;NodePos::nNodeType1068,38470
	int nStart;NodePos::nStart1069,38487
	int nLength;NodePos::nLength1070,38501
	int nNodeFlags;NodePos::nNodeFlags1071,38516
	MCD_STR strMeta;NodePos::strMeta1072,38534
#define x_ISONEOF(1079,38716
#define x_ISWHITESPACE(1081,38808
#define x_ISENDPATHWORD(1083,38938
#define x_ISENDNAME(1085,39142
#define x_ISNOTSECONDLASTINVAL(1087,39375
#define x_ISDOCTYPESTART(1089,39535
#define x_ISATTRIBSPECIAL(1091,39648
#define x_ISSPECIAL(1093,39793
#define x_ISENDANYNAME(1095,39931
#define x_ISENDUNQUOTED(1097,40191
#define x_ISENDATTRIBNAME(1099,40385
#define x_ISSTARTENTREF(1101,40588
#define x_ISINENTREF(1103,40859
struct TokenPos1109,41251
	TokenPos(TokenPos::TokenPos1111,41271
	void Clear(TokenPos::Clear1112,41387
	int Length(TokenPos::Length1113,41435
	MCD_PCSZ GetTokenPtr(TokenPos::GetTokenPtr1114,41485
	MCD_STR GetTokenText(TokenPos::GetTokenText1115,41547
	MCD_CHAR NextChar(TokenPos::NextChar1116,41626
	int WhitespaceToTag(TokenPos::WhitespaceToTag1117,41724
	bool FindAny(TokenPos::FindAny1118,41855
	bool FindName(TokenPos::FindName1128,42112
	bool Match(TokenPos::Match1140,42423
	int m_nL;TokenPos::m_nL1148,42769
	int m_nR;TokenPos::m_nR1149,42781
	int m_nNext;TokenPos::m_nNext1150,42793
	MCD_PCSZ m_pDocText;TokenPos::m_pDocText1151,42808
	int m_nTokenFlags;TokenPos::m_nTokenFlags1152,42831
	int m_nPreSpaceStart;TokenPos::m_nPreSpaceStart1153,42852
	int m_nPreSpaceLength;TokenPos::m_nPreSpaceLength1154,42876
	FilePos* m_pReaderFilePos;TokenPos::m_pReaderFilePos1155,42901
bool TokenPos::FindAttrib(1158,42936
struct TagPos1301,46719
	TagPos(TagPos::TagPos1303,46737
	void SetTagName(TagPos::SetTagName1304,46761
	void Init(TagPos::Init1305,46844
	void IncCount(TagPos::IncCount1306,46958
	MCD_STR strTagName;TagPos::strTagName1307,47003
	int nCount;TagPos::nCount1308,47025
	int nTagNames;TagPos::nTagNames1309,47039
	int iParent;TagPos::iParent1310,47056
	int iNext;TagPos::iNext1311,47071
	int iPrev;TagPos::iPrev1312,47084
	int nSlot;TagPos::nSlot1313,47097
	int iSlotNext;TagPos::iSlotNext1314,47110
	int iSlotPrev;TagPos::iSlotPrev1315,47127
struct ElemStack1318,47150
	enum { LS_TABLESIZE ElemStack::LS_TABLESIZE1320,47171
	ElemStack(ElemStack::ElemStack1321,47201
	~ElemStack(ElemStack::~ElemStack1322,47310
	TagPos& Current(ElemStack::Current1323,47352
	void InitTable(ElemStack::InitTable1324,47394
	TagPos& NextParent(ElemStack::NextParent1325,47462
	TagPos& GetRefTagPosAt(ElemStack::GetRefTagPosAt1326,47544
	void Push(ElemStack::Push1327,47597
	void IntoLevel(ElemStack::IntoLevel1328,47749
	void OutOfLevel(ElemStack::OutOfLevel1329,47796
	void PushIntoLevel(ElemStack::PushIntoLevel1330,47879
	void PopOutOfLevel(ElemStack::PopOutOfLevel1331,48001
	void Pop(ElemStack::Pop1332,48037
	void Slot(ElemStack::Slot1333,48166
	void Unslot(ElemStack::Unslot1334,48300
	int iTop;ElemStack::iTop1337,48547
	int nLevel;ElemStack::nLevel1338,48559
	int iPar;ElemStack::iPar1339,48573
	void Alloc(ElemStack::Alloc1341,48597
	void Copy(ElemStack::Copy1342,48698
	TagPos* pL;ElemStack::pL1343,48805
	int iUsed;ElemStack::iUsed1344,48819
	int nSize;ElemStack::nSize1345,48832
	int anTable[ElemStack::anTable1346,48845
int ElemStack::CalcSlot(1349,48880
void ElemStack::PushTagAndCount(1364,49261
struct FilePos1430,51213
	FilePos(FilePos::FilePos1432,51232
	FILE* m_fp;FilePos::m_fp1452,52139
	int m_nDocFlags;FilePos::m_nDocFlags1453,52153
	int m_nOpFileByteLen;FilePos::m_nOpFileByteLen1454,52172
	int m_nBlockSizeBasis;FilePos::m_nBlockSizeBasis1455,52196
	MCD_INTFILEOFFSET m_nFileByteLen;FilePos::m_nFileByteLen1456,52221
	MCD_INTFILEOFFSET m_nFileByteOffset;FilePos::m_nFileByteOffset1457,52257
	int m_nFileCharUnitSize;FilePos::m_nFileCharUnitSize1458,52296
	int m_nOpFileTextLen;FilePos::m_nOpFileTextLen1459,52323
	MCD_STR m_strIOResult;FilePos::m_strIOResult1460,52347
	MCD_STR m_strEncoding;FilePos::m_strEncoding1461,52372
	MCD_STR* m_pstrBuffer;FilePos::m_pstrBuffer1462,52397
	ElemStack m_elemstack;FilePos::m_elemstack1463,52422
	int m_nReadBufferStart;FilePos::m_nReadBufferStart1464,52447
	int m_nReadBufferRemoved;FilePos::m_nReadBufferRemoved1465,52473
	int m_nReadGatherStart;FilePos::m_nReadGatherStart1466,52501
	MCD_STR m_strReadGatherMarkup;FilePos::m_strReadGatherMarkup1467,52527
struct BomTableStruct 1470,52566
struct BomTableStruct { const char* pszBom;BomTableStruct::pszBom1470,52566
struct BomTableStruct { const char* pszBom; int nBomLen;BomTableStruct::nBomLen1470,52566
struct BomTableStruct { const char* pszBom; int nBomLen; MCD_PCSZ pszBomEnc;BomTableStruct::pszBomEnc1470,52566
struct BomTableStruct { const char* pszBom; int nBomLen; MCD_PCSZ pszBomEnc; int nBomFlag;BomTableStruct::nBomFlag1470,52566
struct BomTableStruct { const char* pszBom; int nBomLen; MCD_PCSZ pszBomEnc; int nBomFlag; } BomTable[BomTable1470,52566
bool FilePos::FileErrorAddResult(1478,52902
void FilePos::FileSpecifyEncoding(1521,54534
bool FilePos::FileAtTop(1533,54980
bool FilePos::FileOpen(1542,55304
bool FilePos::FileRead(1664,59012
bool FilePos::FileCheckRaggedEnd(1710,60667
bool FilePos::FileReadText(1737,61830
bool FilePos::FileWrite(1895,68748
bool FilePos::FileWriteText(1926,69759
bool FilePos::FileClose(1989,72330
bool FilePos::FileReadNextBuffer(2002,72575
void FilePos::FileGatherStart(2042,73955
int FilePos::FileGatherEnd(2047,74039
bool FilePos::FileFlush(2056,74254
struct PathPos2085,75171
	PathPos(PathPos::PathPos2087,75190
	int GetTypeAndInc(PathPos::GetTypeAndInc2088,75333
	int GetNumAndInc(PathPos::GetNumAndInc2089,75479
	MCD_PCSZ GetValAndInc(PathPos::GetValAndInc2090,75582
	int GetValOrWordLen(PathPos::GetValOrWordLen2091,75755
	MCD_CHAR GetChar(PathPos::GetChar2092,75797
	bool IsAtPathEnd(PathPos::IsAtPathEnd2093,75836
	MCD_PCSZ GetPtr(PathPos::GetPtr2094,75933
	void SaveOffset(PathPos::SaveOffset2095,75972
	void RevertOffset(PathPos::RevertOffset2096,76006
	void RevertOffsetAsName(PathPos::RevertOffsetAsName2097,76042
	MCD_PCSZ GetWordAndInc(PathPos::GetWordAndInc2098,76097
	void IncWord(PathPos::IncWord2099,76185
	void IncWord(PathPos::IncWord2100,76264
	void IncChar(PathPos::IncChar2101,76340
	void Inc(PathPos::Inc2102,76367
	bool IsAnywherePath(PathPos::IsAnywherePath2103,76398
	bool IsAbsolutePath(PathPos::IsAbsolutePath2104,76450
	bool IsPath(PathPos::IsPath2105,76502
	bool ValidPath(PathPos::ValidPath2106,76545
	MCD_PCSZ GetPathAttribName(PathPos::GetPathAttribName2107,76593
	int nPathType;PathPos::nPathType2111,76769
	bool bReader;PathPos::bReader2112,76851
	MCD_PCSZ p;PathPos::p2113,76867
	int i;PathPos::i2114,76881
	int iPathAttribName;PathPos::iPathAttribName2115,76890
	int iSave;PathPos::iSave2116,76913
	int nLen;PathPos::nLen2117,76926
bool PathPos::ParsePath(2120,76944
bool PathPos::AttribPredicateMatch(2186,78350
struct SavedPos2210,79117
	SavedPos(SavedPos::SavedPos2213,79193
	MCD_STR strName;SavedPos::strName2214,79237
	int iPos;SavedPos::iPos2215,79256
	enum { SPM_MAIN SavedPos::SPM_MAIN2216,79268
	enum { SPM_MAIN = 1, SPM_CHILD SavedPos::SPM_CHILD2216,79268
	enum { SPM_MAIN = 1, SPM_CHILD = 2, SPM_USED SavedPos::SPM_USED2216,79268
	enum { SPM_MAIN = 1, SPM_CHILD = 2, SPM_USED = 4, SPM_LAST SavedPos::SPM_LAST2216,79268
	int nSavedPosFlags;SavedPos::nSavedPosFlags2217,79336
struct SavedPosMap2220,79364
	SavedPosMap(SavedPosMap::SavedPosMap2223,79451
	~SavedPosMap(SavedPosMap::~SavedPosMap2224,79572
	SavedPos** pTable;SavedPosMap::pTable2225,79691
	int nMapSize;SavedPosMap::nMapSize2226,79712
struct SavedPosMapArray2229,79734
	SavedPosMapArray(SavedPosMapArray::SavedPosMapArray2232,79824
	~SavedPosMapArray(SavedPosMapArray::~SavedPosMapArray2233,79866
	void ReleaseMaps(SavedPosMapArray::ReleaseMaps2234,79908
	SavedPosMap** m_pMaps;SavedPosMapArray::m_pMaps2237,80149
bool SavedPosMapArray::GetMap(2240,80205
void SavedPosMapArray::CopySavedPosMaps(2282,81208
int TokenPos::ParseNode(2323,82335
	enum ParseBits2342,82956
		PD_OPENTAG ParseBits::PD_OPENTAG2344,82977
		PD_BANG ParseBits::PD_BANG2345,82996
		PD_DASH ParseBits::PD_DASH2346,83012
		PD_BRACKET ParseBits::PD_BRACKET2347,83028
		PD_TEXTORWS ParseBits::PD_TEXTORWS2348,83047
		PD_DOCTYPE ParseBits::PD_DOCTYPE2349,83068
		PD_INQUOTE_S ParseBits::PD_INQUOTE_S2350,83088
		PD_INQUOTE_D ParseBits::PD_INQUOTE_D2351,83110
		PD_EQUALS ParseBits::PD_EQUALS2352,83133
		PD_NOQUOTEVAL ParseBits::PD_NOQUOTEVAL2353,83153
	#define FINDNODETYPE(2363,83355
	#define FINDNODETYPENAME(2364,83452
	#define FINDNODEBAD(2365,83538
CMarkup::~CMarkup(2624,91219
void CMarkup::operator=(CMarkup::operator=2630,91299
bool CMarkup::SetDoc(2651,92096
bool CMarkup::SetDoc(2669,92454
bool CMarkup::IsWellFormed(2679,92695
MCD_STR CMarkup::GetError(2696,93076
bool CMarkup::Load(2783,96856
bool CMarkup::ReadTextFile(2792,97099
bool CMarkup::Save(2816,97887
bool CMarkup::WriteTextFile(2823,98092
bool CMarkup::FindElem(2851,99012
bool CMarkup::FindChildElem(2870,99428
MCD_STR CMarkup::EscapeText(2890,99994
MCD_PCSZ PredefEntityTable[PredefEntityTable2976,102656
MCD_STR CMarkup::UnescapeText(3039,106609
bool CMarkup::DetectUTF8(3191,111509
int CMarkup::DecodeCharUTF8(3227,112686
void CMarkup::EncodeCharUTF16(3265,113476
int CMarkup::DecodeCharUTF16(3290,114134
void CMarkup::EncodeCharUTF8(3306,114713
int CMarkup::UTF16To8(3352,115907
int CMarkup::UTF8To16(3385,117016
MCD_STR CMarkup::UTF8ToA(3420,118265
MCD_STR CMarkup::AToUTF8(3440,118901
MCD_STR CMarkup::GetDeclaredEncoding(3457,119444
int CMarkup::GetEncodingCodePage(3528,121445
int CMarkup::FindNode(3533,121558
bool CMarkup::RemoveNode(3617,123757
MCD_STR CMarkup::GetTagName(3631,124064
bool CMarkup::IntoElem(3680,125215
bool CMarkup::OutOfElem(3691,125411
bool CMarkup::GetNthAttrib(3702,125603
MCD_STR CMarkup::GetAttribName(3720,126186
bool CMarkup::SavePos(3735,126647
bool CMarkup::RestorePos(3822,129025
bool CMarkup::SetMapSize(3858,130112
bool CMarkup::RemoveElem(3869,130528
bool CMarkup::RemoveChildElem(3883,130837
void CMarkup::x_InitMarkup(3901,131253
int CMarkup::x_GetParent(3916,131639
void CMarkup::x_SetPos(3921,131712
void CMarkup::x_SetDebugState(3933,131993
int CMarkup::x_GetFreePos(3974,133050
bool CMarkup::x_AllocElemPos(3981,133180
bool CMarkup::x_ParseDoc(3991,133518
int CMarkup::x_ParseElem(4026,134391
int CMarkup::x_FindElem(4176,138757
MCD_STR CMarkup::x_GetPath(4212,139624
MCD_STR CMarkup::x_GetTagName(4254,140650
MCD_STR CMarkup::x_GetAttrib(4266,140963
bool CMarkup::x_SetAttrib(4282,141503
bool CMarkup::x_SetAttrib(4290,141760
bool CMarkup::x_CreateNode(4373,144572
MCD_STR CMarkup::x_EncodeCDATASection(4418,145585
bool CMarkup::x_SetData(4436,146131
bool CMarkup::x_SetData(4444,146333
MCD_STR CMarkup::x_GetData(4490,147731
MCD_STR CMarkup::x_GetElemContent(4582,150970
bool CMarkup::x_SetElemContent(4593,151265
void CMarkup::x_DocChange(4651,152931
void CMarkup::x_Adjust(4656,153081
int CMarkup::x_InsertNew(4716,154677
bool CMarkup::x_AddElem(4855,159058
bool CMarkup::x_AddElem(4863,159284
MCD_STR CMarkup::x_GetSubDoc(4980,162527
bool CMarkup::x_AddSubDoc(4995,162869
int CMarkup::x_RemoveElem(5131,166776
void CMarkup::x_LinkElem(5146,167278
int CMarkup::x_UnlinkElem(5202,168791
int CMarkup::x_UnlinkPrevElem(5234,169688
int CMarkup::x_ReleasePos(5257,170286
int CMarkup::x_ReleaseSubDoc(5266,170490
void CMarkup::x_CheckSavedPos(5294,171142
void CMarkup::x_AdjustForNode(5341,172408
bool CMarkup::x_AddNode(5365,172984
void CMarkup::x_RemoveNode(5429,174936

client_simulator/src/CDeviceinfoHelper.cpp,1019
#define SIOCETHTOOL 32,580
#define ARRAY_SIZE(35,637
static void trimEnter(41,699
static  int get_cpu_name(52,867
static int get_cpu_id(58,1006
static int get_cpu_hz(64,1150
static int get_sys_hostname(71,1287
int get_os_type(79,1445
static int get_sys_defaultLang(85,1577
static int get_mem_total(93,1718
static int get_monitor_info(100,1850
static int get_keyboard_name(107,1994
static int get_audio_info(114,2142
static int get_mouse_name(120,2260
static int get_eth_name(126,2374
static int get_floppy_info(132,2500
static int get_slot_info(138,2616
static int get_usb_info(145,2751
static int get_eth_speed(152,2894
static int str_to_num(159,3012
static int get_mem_space(171,3214
static int get_disk_space(186,3625
CDeviceinfoHelper::CDeviceinfoHelper(202,3953
CDeviceinfoHelper::~CDeviceinfoHelper(207,3999
std::string & CDeviceinfoHelper::getAssetVal(211,4045
bool   CDeviceinfoHelper::getfrot(227,4391
bool   CDeviceinfoHelper::init(272,5818
void  CDeviceinfoHelper::check(363,7689

client_simulator/src/send_thread.cpp,153
uint32_t send_num 6,63
uint32_t error_num 7,86
uint32_t success_num 8,110
int make_data(10,137
int send_data(31,865
void * thread_send_msg(61,1820

client_simulator/src/regesiter.cpp,1267
struct tag_S_Soft_Asset 12,241
    void  *   pAdd tag_S_Soft_Asset::pAdd13,267
    void  *   pDel tag_S_Soft_Asset::pDel14,288
    void  *   pModify tag_S_Soft_Asset::pModify15,309
    bool      bFirst tag_S_Soft_Asset::bFirst16,333
    tag_S_Soft_Asset(tag_S_Soft_Asset::tag_S_Soft_Asset17,356
struct tag_S_Hard_Asset 25,484
    void *  pAdd tag_S_Hard_Asset::pAdd26,510
    void *  pDel tag_S_Hard_Asset::pDel27,529
    void *  pModify tag_S_Hard_Asset::pModify28,548
    void *  pFrontstr;tag_S_Hard_Asset::pFrontstr29,570
    void *  pOld;tag_S_Hard_Asset::pOld30,593
    void *  pMap tag_S_Hard_Asset::pMap31,611
    tag_S_Hard_Asset(tag_S_Hard_Asset::tag_S_Hard_Asset32,630
#define  SEND_LOG_BUF_LEN 40,735
static char m_plogBuffer[m_plogBuffer41,776
static char m_plogBufferDest 42,826
const  char * g_asset_desc[g_asset_desc44,890
bool do_regesiter(48,1193
#define SOFT_MAX 142,4228
bool  report_soft_asset(143,4250
bool report_hard_asset(240,7613
static bool _send_hard_assert(346,11546
static bool _send_soft_assert(378,12229
void _report_soft_assert(442,14059
void _report_hard_assert(474,15052
void report_assert(501,15872
static bool _do_heart_beat(507,15953
void *heart_beat_worker(heart_beat_worker562,17308

client_simulator/src/ConvertUTF.c,837
static const int halfShift 47,1743
static const UTF32 halfBase 49,1813
static const UTF32 halfMask 50,1856
#define UNI_SUR_HIGH_START 52,1896
#define UNI_SUR_HIGH_END 53,1938
#define UNI_SUR_LOW_START 54,1980
#define UNI_SUR_LOW_END 55,2022
#define false	56,2064
#define true	57,2083
ConversionResult ConvertUTF32toUTF16 61,2180
ConversionResult ConvertUTF16toUTF32 110,3729
static const char trailingBytesForUTF8[trailingBytesForUTF8174,6033
static const UTF32 offsetsFromUTF8[offsetsFromUTF8190,6817
static const UTF8 firstByteMark[firstByteMark200,7297
ConversionResult ConvertUTF16toUTF8 214,7923
static Boolean isLegalUTF8(295,11059
Boolean isLegalUTF8Sequence(326,12118
ConversionResult ConvertUTF8toUTF16 336,12419
ConversionResult ConvertUTF32toUTF8 409,14838
ConversionResult ConvertUTF8toUTF32 462,16679

client_simulator/src/common.cpp,449
std::string g_server_ip 5,65
std::string g_dev_id 6,95
int g_server_port 7,122
std::string g_mac_addr 8,146
std::string g_self_ipaddr 9,175
std::string g_gw_ip 10,207
int g_run_times;11,233
int g_log_interval 13,251
int g_policy_interval 14,275
int g_sfd_flag 15,302
int g_upload_log_times 16,322
void test(19,352
void get_local_time(23,437
static bool Get_Network_Info(34,717
int      get_logHeader(49,1149
int code_convert(86,2208

client_simulator/src/run_policy_sfd.cpp,1306
#define	EDPSERVER_PORT	17,340
#define	AGENT_DOWNLOADFILE	21,452
#define	AGENT_DOWNLOADFINISH	25,567
#define	AGENT_GETDOWNLOADLIST	29,684
#define		DOWN_PATCH	32,749
#define		DOWN_SOFT	33,776
#define		DOWN_USERBIND	34,802
#define	VRV_TAG	37,848
#define	VRV_FLAG	41,936
#define		MAX_LEN	44,1004
#define		FILE_TYPE_RPM	46,1077
#define		FILE_TYPE_DEB	47,1120
#define		FILE_TYPE_CLT_UPDATE	48,1163
#define FILE_POLICY_CRC	50,1218
#define CLIENT_UPDATE_FILE_PATH 51,1261
#define CLIENT_UPDATE_PROGRAM_NAME 52,1331
#define FILE_DL_FILE_INFO 53,1392
    unsigned int m_flag;::m_flag57,1453
    unsigned short m_type;::m_type58,1491
    unsigned short m_what;::m_what59,1563
    unsigned int m_pwd;::m_pwd60,1606
    unsigned int pkt_crc;::pkt_crc61,1664
    unsigned int pkt_len;::pkt_len62,1706
    unsigned short m_tag;::m_tag63,1773
    unsigned short m_size;::m_size64,1822
    unsigned int m_address;::m_address65,1882
} pkt_head;66,1959
policy_st m_policy;68,1972
void softDownCtl_log_run_info 69,1992
static int delete_target_path 78,2151
static void replaceAll(94,2542
static int send_pkt(115,3156
static int  recv_pkt(167,5271
bool import_xml(247,8261
static int get_dl_file_full_name(438,15971
static int download_file(485,17398
void run_policy_sfd(738,25316

client_simulator/inc/CDeviceinfoHelper.h,784
#define CDEVICEINFOHELPER_H_11,141
	asset_hd 17,241
	asset_cd 18,263
	asset_cpu,19,285
	asset_mbd,20,310
	asset_mem,21,332
	asset_vc 22,354
	asset_kb,23,376
	asset_svctl 24,398
	asset_mouse,25,450
	asset_nic,26,495
	asset_fd,27,518
	asset_slot,28,550
	asset_usb,29,580
	asset_nic_speed,30,611
	asset_mem_used 31,645
	asset_hd_used,32,685
	asset_count,33,725
} en_assetType;34,739
typedef std::map<int int36,756
typedef std::map<int , std::string>  CDeviceInfoMap 36,756
class CDeviceinfoHelper 38,811
	std::string    &    getfront(CDeviceinfoHelper::getfront52,1130
	CDeviceInfoMap &    getMap(CDeviceinfoHelper::getMap56,1192
	CDeviceInfoMap  m_devmap CDeviceinfoHelper::m_devmap63,1325
	std::string     m_strFront CDeviceinfoHelper::m_strFront64,1353

client_simulator/inc/run_policy_sfd.h,1059
#define RUN_POLICY_FILE_XXXX_XX2,32
#define LEN_FILE_NAME 6,84
#define LEN_PARAM 7,110
#define LEN_TIP_MSG 8,132
#define LEN_STR_INSTALL_CHK_ITEM 9,156
#define LEN_STR_UP_FILE_ATTR 10,193
enum option12,227
    WRONG,14,241
    RIGHT15,252
typedef struct policy_s18,266
	option runhidden:runhidden20,292
		issystem:issystem21,335
		run:run22,380
		prompt:prompt23,420
		deletesource:deletesource24,457
		repeatdo:repeatdo25,509
		autosync:autosync26,545
		filecrc:filecrc27,587
	int installoktime;29,623
	int redownintervaltime;30,671
    int dl_file_type;31,718
	char filename[filename33,764
	char targetpath[targetpath34,812
	char cmdargv[cmdargv35,880
	char runmsg[runmsg36,929
	char installokfileversion[installokfileversion37,982
	char installokfile[installokfile39,1120
	char installokprocess[installokprocess40,1202
	char lastupfileattr[lastupfileattr41,1281
} policy_st;42,1329
typedef struct dl_file_info_s45,1344
    char full_name[full_name47,1376
    int stat_ok;48,1415
} dl_file_info_st;49,1433

client_simulator/inc/cli_config.h,497
#define  THIS_IS_CLI_CONFIG_HEADER2,35
#define EDP_SERVICE_VER 9,225
#define CLIENT_VERSION 12,285
#define EDP_SERVICE_FLOCK 13,319
#define EDP_WATCHV_FLOCK 14,367
#define   WINSRV19,447
	#define STRITEM_TAG_END 22,485
	#define STRITEM_TAG_END 24,524
#define  EDP_GUIAPP_REGISTER 31,596
#define  EDP_GUIAPP_TRAY 32,634
#define  EDP_SVRAPP_NAME 33,671
#define  EDP_UNINSTALL 34,713
#define   HW_SW41,791
#define   HW_X8642,807
#define   OEM_ZB_KYLIN 55,1012
#define PKG_DEB 65,1275

client_simulator/inc/easylogging++.h,79398
#define EASYLOGGINGPP_H17,416
#   define ELPP_COMPILER_GCC 20,502
#   define ELPP_GCC_VERSION 21,533
#      define ELPP_CXX0X 25,734
#      define ELPP_CXX11 27,797
#   define ELPP_COMPILER_MSVC 32,939
#   define ELPP_CRT_DBG_WARNINGS 33,971
#      define ELPP_CXX0X 35,1032
#      define ELPP_CXX11 37,1086
#   define ELPP_COMPILER_CLANG 42,1229
#   define ELPP_CLANG_VERSION 43,1262
#      define ELPP_CXX11 47,1470
#   define ELPP_MINGW 52,1649
#   define ELPP_CYGWIN 56,1784
#   define ELPP_COMPILER_INTEL 60,1904
#   define ELPP_OS_WINDOWS 65,2025
#   define ELPP_OS_LINUX 69,2154
#   define ELPP_OS_MAC 73,2263
#   define ELPP_OS_FREEBSD 77,2354
#   define ELPP_OS_SOLARIS 81,2420
#   define ELPP_OS_UNIX 85,2561
#   define ELPP_OS_ANDROID 89,2727
#   undef ELPP_OS_UNIX93,2873
#   undef ELPP_OS_LINUX94,2896
#   define ELPP_OS_UNIX 95,2920
#   define ELPP_OS_LINUX 96,2946
#   define ELPP_INTERNAL_DEBUGGING_OUT_INFO 99,3080
#   define ELPP_INTERNAL_DEBUGGING_OUT_ERROR 102,3230
#   define ELPP_INTERNAL_DEBUGGING_ENDL 105,3376
#   define ELPP_INTERNAL_DEBUGGING_MSG(108,3516
#      define ELPP_ASSERT(113,3724
#      define ELPP_ASSERT(120,4244
#   define ELPP_ASSERT(128,4720
#   define ELPP_INTERNAL_DEBUGGING_WRITE_PERROR 131,4813
#   define ELPP_INTERNAL_DEBUGGING_WRITE_PERROR 135,5017
#      define ELPP_INTERNAL_ERROR(140,5267
#   undef ELPP_INTERNAL_INFO148,5753
#   define ELPP_INTERNAL_ERROR(149,5782
#      define ELPP_INTERNAL_INFO_LEVEL 153,5935
#      define ELPP_INTERNAL_INFO(156,6063
#   undef ELPP_INTERNAL_INFO162,6406
#   define ELPP_INTERNAL_INFO(163,6435
#      define ELPP_STACKTRACE 167,6593
#define ELPP_UNUSED(177,6951
#   define ELPP_LOG_PERMS 180,7046
#      define ELPP_EXPORT 184,7257
#      define ELPP_EXPORT 186,7314
#   define ELPP_EXPORT189,7411
#undef STRTOK192,7537
#undef STRERROR193,7551
#undef STRCAT194,7567
#undef STRCPY195,7581
#   define STRTOK(197,7621
#   define STRERROR(198,7666
#   define STRCAT(199,7715
#   define STRCPY(200,7764
#   define STRTOK(202,7819
#   define STRERROR(203,7859
#   define STRCAT(204,7900
#   define STRCPY(205,7942
#   define ELPP_USE_STD_THREADING 209,8112
#undef ELPP_FINAL211,8235
#   define ELPP_FINAL213,8307
#   define ELPP_FINAL 215,8335
#   define ELPP_ASYNC_LOGGING 218,8461
#   define ELPP_ASYNC_LOGGING 220,8499
#   define ELPP_THREADING_ENABLED 223,8627
#undef ELPP_FUNC226,8750
#   define ELPP_FUNC 228,8805
#   define ELPP_FUNC 230,8870
#   define ELPP_FUNC 232,8951
#   define ELPP_FUNC 234,9030
#      define ELPP_FUNC 237,9102
#      define ELPP_FUNC 239,9144
#undef ELPP_VARIADIC_TEMPLATES_SUPPORTED242,9232
#   define ELPP_VARIADIC_TEMPLATES_SUPPORTED 245,9443
#   define ELPP_LOGGING_ENABLED 249,9676
#   define ELPP_DEBUG_LOG 252,9862
#   define ELPP_DEBUG_LOG 254,9896
#   define ELPP_INFO_LOG 257,10107
#   define ELPP_INFO_LOG 259,10140
#   define ELPP_WARNING_LOG 262,10307
#   define ELPP_WARNING_LOG 264,10343
#   define ELPP_ERROR_LOG 267,10514
#   define ELPP_ERROR_LOG 269,10548
#   define ELPP_FATAL_LOG 272,10715
#   define ELPP_FATAL_LOG 274,10749
#   define ELPP_TRACE_LOG 277,10916
#   define ELPP_TRACE_LOG 279,10950
#   define ELPP_VERBOSE_LOG 282,11119
#   define ELPP_VERBOSE_LOG 284,11155
#undef ELPP_LITERAL436,15394
#undef ELPP_STRLEN437,15414
#undef ELPP_COUT438,15433
#   define ELPP_LITERAL(440,15476
#   define ELPP_STRLEN 441,15512
#      define ELPP_COUT 443,15574
#      define ELPP_COUT 445,15624
typedef wchar_t char_t;447,15698
typedef std::wstring string_t;448,15722
typedef std::wstringstream stringstream_t;449,15753
typedef std::wfstream fstream_t;450,15796
typedef std::wostream ostream_t;451,15829
#   define ELPP_LITERAL(453,15868
#   define ELPP_STRLEN 454,15901
#      define ELPP_COUT 456,15963
#      define ELPP_COUT 458,16013
typedef char char_t;460,16086
typedef std::string string_t;461,16107
typedef std::stringstream stringstream_t;462,16137
typedef std::fstream fstream_t;463,16179
typedef std::ostream ostream_t;464,16211
#   define ELPP_COUT_LINE(467,16311
#   define ELPP_COUT_LINE(469,16383
typedef unsigned short 471,16481
typedef std::shared_ptr<base::Storage> StoragePointer;472,16514
typedef int VerboseLevel;473,16569
typedef std::shared_ptr<LogDispatchCallback> LogDispatchCallbackPtr;474,16595
typedef std::shared_ptr<PerformanceTrackingCallback> PerformanceTrackingCallbackPtr;475,16664
class NoCopy 480,16909
    NoCopy(NoCopy::NoCopy482,16935
class StaticClass 491,17274
enum class Level 502,17700
        Global Level::Global504,17863
        Trace Level::Trace506,17995
        Debug Level::Debug508,18102
        Fatal Level::Fatal510,18204
        Error Level::Error512,18324
        Warning Level::Warning514,18422
        Verbose Level::Verbose516,18539
        Info Level::Info518,18639
        Unknown Level::Unknown520,18704
class LevelHelper 523,18799
    static const base::type::EnumType kMinValid LevelHelper::kMinValid526,18930
    static const base::type::EnumType kMaxValid LevelHelper::kMaxValid528,19128
    static base::type::EnumType castToInt(LevelHelper::castToInt530,19296
    static Level castFromInt(LevelHelper::castFromInt534,19494
    static const char* convertToString(LevelHelper::convertToString539,19696
    static Level convertFromString(LevelHelper::convertFromString554,20486
    static inline void forEachLevel(LevelHelper::forEachLevel577,21917
enum class ConfigurationType 589,22410
    Enabled ConfigurationType::Enabled592,22616
    ToFile ConfigurationType::ToFile594,22701
    ToStandardOutput ConfigurationType::ToStandardOutput597,22872
    Format ConfigurationType::Format599,22973
    Filename ConfigurationType::Filename601,23086
    MillisecondsWidth ConfigurationType::MillisecondsWidth603,23181
    PerformanceTracking ConfigurationType::PerformanceTracking607,23399
    MaxLogFileSize ConfigurationType::MaxLogFileSize612,23634
    LogFlushThreshold ConfigurationType::LogFlushThreshold614,23746
    Unknown ConfigurationType::Unknown616,23822
class ConfigurationTypeHelper 619,23925
    static const base::type::EnumType kMinValid ConfigurationTypeHelper::kMinValid622,24081
    static const base::type::EnumType kMaxValid ConfigurationTypeHelper::kMaxValid624,24306
    static base::type::EnumType castToInt(ConfigurationTypeHelper::castToInt626,24509
    static ConfigurationType castFromInt(ConfigurationTypeHelper::castFromInt630,24757
    static const char* convertToString(ConfigurationTypeHelper::convertToString635,25010
    static ConfigurationType convertFromString(ConfigurationTypeHelper::convertFromString651,26251
    static inline void forEachConfigType(ConfigurationTypeHelper::forEachConfigType677,28213
enum class LoggingFlag 688,28679
    NewLineForContainer LoggingFlag::NewLineForContainer690,28799
    AllowVerboseIfModuleNotSpecified LoggingFlag::AllowVerboseIfModuleNotSpecified693,28964
    LogDetailedCrashReason LoggingFlag::LogDetailedCrashReason695,29100
    DisableApplicationAbortOnFatalLog LoggingFlag::DisableApplicationAbortOnFatalLog697,29216
    ImmediateFlush LoggingFlag::ImmediateFlush699,29353
    StrictLogFileSizeCheck LoggingFlag::StrictLogFileSizeCheck701,29421
    ColoredTerminalOutput LoggingFlag::ColoredTerminalOutput703,29523
    MultiLoggerSupport LoggingFlag::MultiLoggerSupport705,29656
    DisablePerformanceTrackingCheckpointComparison LoggingFlag::DisablePerformanceTrackingCheckpointComparison707,29754
    DisableVModules LoggingFlag::DisableVModules709,29844
    DisableVModulesExtensions LoggingFlag::DisableVModulesExtensions711,29914
    HierarchicalLogging LoggingFlag::HierarchicalLogging713,29996
    CreateLoggerAutomatically LoggingFlag::CreateLoggerAutomatically715,30091
    AutoSpacing LoggingFlag::AutoSpacing717,30203
    FixedTimeFormat LoggingFlag::FixedTimeFormat719,30333
namespace base 721,30364
namespace consts base::consts723,30440
        double value;base::consts::value814,37292
        const base::type::char_t* unit;base::consts::unit815,37314
        int numb;base::consts::numb826,37771
        const char* name;base::consts::name827,37789
        const char* brief;base::consts::brief828,37815
        const char* detail;base::consts::detail829,37842
typedef std::function<void(void846,38941
namespace base 847,39015
static inline void defaultPreRollOutCallback(base::defaultPreRollOutCallback848,39032
enum class TimestampUnit base::TimestampUnit850,39150
    Microsecond base::TimestampUnit::Microsecond851,39200
    Microsecond = 0, Millisecond base::TimestampUnit::Millisecond851,39200
    Microsecond = 0, Millisecond = 1, Second base::TimestampUnit::Second851,39200
    Microsecond = 0, Millisecond = 1, Second = 2, Minute base::TimestampUnit::Minute851,39200
    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour base::TimestampUnit::Hour851,39200
    Microsecond = 0, Millisecond = 1, Second = 2, Minute = 3, Hour = 4, Day base::TimestampUnit::Day851,39200
enum class FormatFlags 854,39382
    DateTime FormatFlags::DateTime855,39430
    DateTime = 1<<1, LoggerId FormatFlags::LoggerId855,39430
    DateTime = 1<<1, LoggerId = 1<<2, File FormatFlags::File855,39430
    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line FormatFlags::Line855,39430
    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location FormatFlags::Location855,39430
    DateTime = 1<<1, LoggerId = 1<<2, File = 1<<3, Line = 1<<4, Location = 1<<5, Function FormatFlags::Function855,39430
    User FormatFlags::User856,39528
    User = 1<<7, Host FormatFlags::Host856,39528
    User = 1<<7, Host = 1<<8, LogMessage FormatFlags::LogMessage856,39528
    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel FormatFlags::VerboseLevel856,39528
    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName FormatFlags::AppName856,39528
    User = 1<<7, Host = 1<<8, LogMessage = 1<<9, VerboseLevel = 1<<10, AppName = 1<<11, ThreadId FormatFlags::ThreadId856,39528
    Level FormatFlags::Level857,39634
    Level = 1<<13, FileBase FormatFlags::FileBase857,39634
    Level = 1<<13, FileBase = 1<<14, LevelShort FormatFlags::LevelShort857,39634
class MillisecondsWidth 860,39780
    MillisecondsWidth(MillisecondsWidth::MillisecondsWidth862,39814
    explicit MillisecondsWidth(MillisecondsWidth::MillisecondsWidth863,39893
    bool operator==(MillisecondsWidth::operator==864,39952
    int m_width;MillisecondsWidth::m_width865,40077
    int m_width; unsigned int m_offset;MillisecondsWidth::m_offset865,40077
    void init(MillisecondsWidth::init867,40126
namespace utils 882,40609
typename std::enable_if<utils::std::enable_if886,40715
safeDelete(utils::safeDelete887,40779
static inline const char* charPtrVal(894,40982
static inline void abort(898,41173
namespace bitwise 911,41860
static inline base::type::EnumType And(bitwise::And913,41905
static inline base::type::EnumType Not(917,42099
static inline base::type::EnumType Or(921,42296
static inline void addFlag(926,42513
static inline void removeFlag(930,42659
static inline bool hasFlag(934,42809
namespace threading 938,42956
namespace internal threading::internal941,43036
class Mutex threading::internal::Mutex943,43130
    Mutex(threading::internal::Mutex::Mutex945,43167
    virtual ~Mutex(threading::internal::Mutex::~Mutex953,43376
    inline void lock(threading::internal::Mutex::lock961,43584
    inline bool try_lock(threading::internal::Mutex::try_lock969,43790
    inline void unlock(threading::internal::Mutex::unlock977,44027
    pthread_mutex_t m_underlyingMutex;threading::internal::Mutex::m_underlyingMutex987,44266
    CRITICAL_SECTION m_underlyingMutex;threading::internal::Mutex::m_underlyingMutex989,44330
class ScopedLock 994,44496
    explicit ScopedLock(ScopedLock::ScopedLock996,44538
    virtual ~ScopedLock(ScopedLock::~ScopedLock1001,44632
    M* m_mutex;ScopedLock::m_mutex1005,44706
static inline std::string getCurrentThreadId(1010,44871
static inline void msleep(1017,45068
typedef base::threading::internal::Mutex Mutex;1020,45156
typedef base::threading::internal::ScopedLock<base::threading::Mutex> ScopedLock;1021,45204
static inline std::string getCurrentThreadId(1024,45378
static inline void msleep(1029,45518
typedef std::mutex Mutex;1035,45758
typedef std::lock_guard<std::mutex> ScopedLock;1036,45784
namespace internal 1039,45876
class NoMutex internal::NoMutex1041,45961
    NoMutex(internal::NoMutex::NoMutex1043,46000
    inline void lock(internal::NoMutex::lock1044,46021
    inline bool try_lock(internal::NoMutex::try_lock1045,46051
    inline void unlock(internal::NoMutex::unlock1046,46099
class NoScopedLock 1050,46229
    explicit NoScopedLock(NoScopedLock::NoScopedLock1052,46273
    virtual ~NoScopedLock(NoScopedLock::~NoScopedLock1054,46315
static inline std::string getCurrentThreadId(1060,46416
static inline void msleep(1063,46497
typedef base::threading::internal::NoMutex Mutex;1066,46564
typedef base::threading::internal::NoScopedLock<base::threading::Mutex> ScopedLock;1067,46614
class ThreadSafe 1070,46801
    virtual inline void acquireLock(ThreadSafe::acquireLock1072,46828
    virtual inline void releaseLock(ThreadSafe::releaseLock1073,46901
    virtual inline base::threading::Mutex& lock(ThreadSafe::lock1074,46976
    ThreadSafe(ThreadSafe::ThreadSafe1076,47072
    virtual ~ThreadSafe(ThreadSafe::~ThreadSafe1077,47096
    base::threading::Mutex m_mutex;ThreadSafe::m_mutex1079,47138
namespace utils 1082,47203
class File utils::File1083,47221
    static base::type::fstream_t* newFileStream(utils::File::newFileStream1087,47389
    static std::size_t getSizeOfFile(utils::File::getSizeOfFile1108,48215
    static inline bool pathExists(utils::File::pathExists1120,48625
    static bool createPath(utils::File::createPath1139,49266
    static std::string extractPathFromFilename(utils::File::extractPathFromFilename1179,50722
    static void buildStrippedFilename(utils::File::buildStrippedFilename1191,51263
    static void buildBaseFilename(utils::File::buildBaseFilename1204,51854
class Str 1222,52716
    static inline bool isDigit(Str::isDigit1225,52862
    static bool wildCardMatch(Str::wildCardMatch1230,53009
    static inline std::string& ltrim(Str::ltrim1257,53817
    static inline std::string& rtrim(Str::rtrim1264,54100
    static inline std::string& trim(Str::trim1271,54402
    static inline bool startsWith(Str::startsWith1279,54731
    static inline bool endsWith(Str::endsWith1287,55147
    static inline std::string& replaceAll(Str::replaceAll1296,55664
    static inline std::string& replaceAll(Str::replaceAll1306,56154
    static void replaceFirstWithEscape(Str::replaceFirstWithEscape1317,56607
    static void replaceFirstWithEscape(Str::replaceFirstWithEscape1331,57283
    static inline std::string& toUpper(Str::toUpper1339,57711
    static inline bool cStringEq(Str::cStringEq1345,57924
    static bool cStringCaseEq(Str::cStringCaseEq1353,58280
    static inline bool contains(Str::contains1366,58740
    static inline char* convertAndAddToBuff(Str::convertAndAddToBuff1374,58924
    static inline char* addToBuff(Str::addToBuff1389,59503
    static inline char* clearBuff(Str::clearBuff1395,59693
    static char* wcharPtrToCharPtr(Str::wcharPtrToCharPtr1403,60009
class OS 1418,60712
    static const char* getWindowsEnvironmentVariable(OS::getWindowsEnvironmentVariable1425,61071
    static inline std::string getProperty(OS::getProperty1436,61447
    static std::string getDeviceName(OS::getDeviceName1443,61719
    static const std::string getBashOutput(OS::getBashOutput1460,62422
    static std::string getEnvironmentVariable(OS::getEnvironmentVariable1490,63743
    static inline std::string currentUser(OS::currentUser1513,64756
    static inline std::string currentHost(OS::currentHost1529,65398
    static inline bool termSupportsColor(OS::termSupportsColor1542,65925
#define ELPP_INITI_BASIC_DECLR 1551,66321
class DateTime 1562,66817
    static void gettimeofday(DateTime::gettimeofday1568,67177
    static inline std::string getDateTime(DateTime::getDateTime1599,68480
    static base::type::string_t formatTime(DateTime::formatTime1611,69075
    static inline unsigned long long getTimeDifference(DateTime::getTimeDifference1628,69915
    static inline struct ::tm* buildTimeInfo(DateTime::buildTimeInfo1638,70560
    static char* parseFormat(DateTime::parseFormat1659,71279
class CommandLineArgs 1724,74680
    CommandLineArgs(CommandLineArgs::CommandLineArgs1726,74712
    CommandLineArgs(CommandLineArgs::CommandLineArgs1729,74796
    CommandLineArgs(CommandLineArgs::CommandLineArgs1732,74882
    virtual ~CommandLineArgs(CommandLineArgs::~CommandLineArgs1735,74962
    inline void setArgs(CommandLineArgs::setArgs1737,75046
    inline void setArgs(CommandLineArgs::setArgs1741,75202
    inline bool hasParamWithValue(CommandLineArgs::hasParamWithValue1771,76468
    inline const char* getParamValue(CommandLineArgs::getParamValue1776,76713
    inline bool hasParam(CommandLineArgs::hasParam1780,76953
    inline bool empty(CommandLineArgs::empty1784,77188
    inline std::size_t size(CommandLineArgs::size1788,77363
    inline friend base::type::ostream_t& operator<<(CommandLineArgs::operator<<1791,77470
    int m_argc;CommandLineArgs::m_argc1802,77831
    char** m_argv;CommandLineArgs::m_argv1803,77847
    std::map<CommandLineArgs::std::map1804,77866
    std::map<std::string, std::string> m_paramsWithValue;CommandLineArgs::m_paramsWithValue1804,77866
    std::vector<std::string> m_params;CommandLineArgs::m_params1805,77924
template <typename T_Ptr,1813,78550
class AbstractRegistry 1814,78596
    typedef typename Container::iterator iterator;AbstractRegistry::iterator1816,78666
    typedef typename Container::const_iterator const_iterator;AbstractRegistry::const_iterator1817,78717
    AbstractRegistry(AbstractRegistry::AbstractRegistry1820,78816
    AbstractRegistry(AbstractRegistry::AbstractRegistry1823,78911
    bool operator==(AbstractRegistry::operator==1831,79085
    bool operator!=(AbstractRegistry::operator!=1843,79424
    AbstractRegistry& operator=(AbstractRegistry::operator=1856,79802
    virtual ~AbstractRegistry(AbstractRegistry::~AbstractRegistry1865,80015
    virtual inline iterator begin(AbstractRegistry::begin1869,80118
    virtual inline iterator end(AbstractRegistry::end1874,80265
    virtual inline const_iterator cbegin(AbstractRegistry::cbegin1880,80420
    virtual inline const_iterator cend(AbstractRegistry::cend1885,80559
    virtual inline bool empty(AbstractRegistry::empty1890,80711
    virtual inline std::size_t size(AbstractRegistry::size1895,80839
    virtual inline Container& list(AbstractRegistry::list1900,80994
    virtual inline const Container& list(AbstractRegistry::list1905,81145
    void reinitDeepCopy(AbstractRegistry::reinitDeepCopy1914,81438
    Container m_list;AbstractRegistry::m_list1920,81573
template <typename T_Ptr,1928,81990
template <typename T_Ptr, typename T_Key 1928,81990
    typedef typename Registry<Registry1931,82129
    typedef typename Registry<Registry1932,82193
    Registry& operator=(operator=1947,82789
template <typename T_Ptr,2004,84652
class RegistryWithPred 2005,84693
    typedef typename RegistryWithPred<RegistryWithPred::RegistryWithPred2007,84780
    typedef typename RegistryWithPred<T_Ptr, Pred>::iterator iterator;RegistryWithPred::iterator2007,84780
    typedef typename RegistryWithPred<RegistryWithPred::RegistryWithPred2008,84851
    typedef typename RegistryWithPred<T_Ptr, Pred>::const_iterator const_iterator;RegistryWithPred::const_iterator2008,84851
    RegistryWithPred(RegistryWithPred::RegistryWithPred2010,84935
    virtual ~RegistryWithPred(RegistryWithPred::~RegistryWithPred2013,84971
    RegistryWithPred(RegistryWithPred::RegistryWithPred2018,85159
    RegistryWithPred& operator=(RegistryWithPred::operator=2028,85553
    friend inline base::type::ostream_t& operator<<(RegistryWithPred::operator<<2036,85741
    virtual inline void unregisterAll(RegistryWithPred::unregisterAll2044,86050
    virtual void unregister(RegistryWithPred::unregister2053,86296
    virtual inline void registerNew(RegistryWithPred::registerNew2068,86737
    template <typename T,RegistryWithPred::T2074,86984
    inline T_Ptr* get(RegistryWithPred::get2075,87023
    virtual inline void deepCopy(RegistryWithPred::deepCopy2084,87313
class Loggable 2096,87757
    virtual ~Loggable(Loggable::~Loggable2098,87782
    friend inline el::base::type::ostream_t& operator<<(Loggable::operator<<2101,87882
namespace base 2106,88051
class LogFormat base::LogFormat2108,88180
    LogFormat(base::LogFormat::LogFormat2110,88224
    LogFormat(base::LogFormat::LogFormat2118,88438
    LogFormat(base::LogFormat::LogFormat2123,88600
    LogFormat(base::LogFormat::LogFormat2131,88866
    LogFormat& operator=(base::LogFormat::operator=2139,89182
    virtual ~LogFormat(base::LogFormat::~LogFormat2147,89442
    inline bool operator==(base::LogFormat::operator==2150,89480
    void parseFromFormat(base::LogFormat::parseFromFormat2157,89842
    inline Level level(base::LogFormat::level2207,93102
    inline const base::type::string_t& userFormat(base::LogFormat::userFormat2211,93170
    inline const base::type::string_t& format(base::LogFormat::format2215,93270
    inline const std::string& dateTimeFormat(base::LogFormat::dateTimeFormat2219,93361
    inline base::type::EnumType flags(base::LogFormat::flags2223,93459
    inline bool hasFlag(base::LogFormat::hasFlag2227,93541
    virtual void log(base::LogFormat::log2231,93656
    virtual void updateDateFormat(base::LogFormat::updateDateFormat2239,93974
    virtual void updateFormatSpec(base::LogFormat::updateFormatSpec2267,95206
    inline void addFlag(base::LogFormat::addFlag2317,98605
    Level m_level;base::LogFormat::m_level2322,98717
    base::type::string_t m_userFormat;base::LogFormat::m_userFormat2323,98736
    base::type::string_t m_format;base::LogFormat::m_format2324,98775
    std::string m_dateTimeFormat;base::LogFormat::m_dateTimeFormat2325,98810
    base::type::EnumType m_flags;base::LogFormat::m_flags2326,98844
typedef std::function<const char*char2331,99030
class CustomFormatSpecifier 2335,99239
    CustomFormatSpecifier(CustomFormatSpecifier::CustomFormatSpecifier2337,99277
    inline const char* formatSpecifier(CustomFormatSpecifier::formatSpecifier2339,99448
    inline const FormatSpecifierValueResolver& resolver(CustomFormatSpecifier::resolver2340,99529
    inline bool operator==(CustomFormatSpecifier::operator==2341,99620
    const char* m_formatSpecifier;CustomFormatSpecifier::m_formatSpecifier2346,99758
    FormatSpecifierValueResolver m_resolver;CustomFormatSpecifier::m_resolver2347,99793
class Configuration 2358,100484
    Configuration(Configuration::Configuration2360,100532
    Configuration& operator=(Configuration::operator=2366,100704
    virtual ~Configuration(Configuration::~Configuration2373,100899
    Configuration(Configuration::Configuration2377,101009
    inline Level level(Configuration::level2384,101260
    inline ConfigurationType configurationType(Configuration::configurationType2389,101392
    inline const std::string& value(Configuration::value2394,101549
    inline void setValue(Configuration::setValue2401,101884
    virtual inline void log(Configuration::log2405,101969
    class Predicate Configuration::Predicate2412,102348
        Predicate(Configuration::Predicate::Predicate2414,102382
        inline bool operator()(Configuration::Predicate::operator()2419,102544
        Level m_level;Configuration::Predicate::m_level2424,102758
        ConfigurationType m_configurationType;Configuration::Predicate::m_configurationType2425,102781
    Level m_level;Configuration::m_level2429,102845
    ConfigurationType m_configurationType;Configuration::m_configurationType2430,102864
    std::string m_value;Configuration::m_value2431,102907
class Configurations 2437,103103
    Configurations(Configurations::Configurations2440,103271
    Configurations(Configurations::Configurations2451,103856
    virtual ~Configurations(Configurations::~Configurations2460,104211
    inline bool parseFromFile(Configurations::parseFromFile2469,104783
    inline bool parseFromText(Configurations::parseFromText2491,106154
    inline void setFromBase(Configurations::setFromBase2501,106565
    bool hasConfiguration(Configurations::hasConfiguration2515,107088
    inline bool hasConfiguration(Configurations::hasConfiguration2530,107722
    inline void set(Configurations::set2553,109107
    inline void set(Configurations::set2563,109694
    inline Configuration* get(Configurations::get2570,109875
    inline void setGlobally(Configurations::setGlobally2579,110379
    inline void clear(Configurations::clear2584,110607
    inline const std::string& configurationFile(Configurations::configurationFile2592,110899
    void setToDefault(Configurations::setToDefault2597,111074
    void setRemainingToDefault(Configurations::setRemainingToDefault2627,113254
    class Parser Configurations::Parser2652,115221
        static bool parseFromFile(Configurations::Parser::parseFromFile2661,115927
        static bool parseFromText(Configurations::Parser::parseFromText2688,117747
        static void ignoreComments(Configurations::Parser::ignoreComments2705,118580
        static inline bool isLevel(Configurations::Parser::isLevel2723,119510
        static inline bool isComment(Configurations::Parser::isComment2727,119686
        static inline bool isConfig(Configurations::Parser::isConfig2731,119866
        static bool parseLine(Configurations::Parser::parseLine2739,120222
    std::string m_configurationFile;Configurations::m_configurationFile2799,123568
    bool m_isFromFile;Configurations::m_isFromFile2800,123605
    void unsafeSetIfNotExist(Configurations::unsafeSetIfNotExist2804,123728
    void unsafeSet(Configurations::unsafeSet2812,124092
    void setGlobally(Configurations::setGlobally2826,124806
    void unsafeSetGlobally(Configurations::unsafeSetGlobally2839,125562
namespace base 2851,126121
typedef std::shared_ptr<base::type::fstream_t> FileStreamPtr;base::FileStreamPtr2852,126138
typedef std::map<std::string,base::std::string2853,126200
typedef std::map<std::string, FileStreamPtr> LogStreamsReferenceMap;base::LogStreamsReferenceMap2853,126200
class TypedConfigurations base::TypedConfigurations2860,126643
    TypedConfigurations(base::TypedConfigurations::TypedConfigurations2865,126993
    TypedConfigurations(base::TypedConfigurations::TypedConfigurations2871,127238
    virtual ~TypedConfigurations(base::TypedConfigurations::~TypedConfigurations2877,127462
    const Configurations* configurations(base::TypedConfigurations::configurations2880,127510
    inline bool enabled(base::TypedConfigurations::enabled2884,127605
    inline bool toFile(base::TypedConfigurations::toFile2888,127721
    inline const std::string& filename(base::TypedConfigurations::filename2892,127834
    inline bool toStandardOutput(base::TypedConfigurations::toStandardOutput2896,127974
    inline const base::LogFormat& logFormat(base::TypedConfigurations::logFormat2900,128117
    inline const base::MillisecondsWidth& millisecondsWidth(base::TypedConfigurations::millisecondsWidth2904,128268
    inline bool performanceTracking(base::TypedConfigurations::performanceTracking2908,128475
    inline base::type::fstream_t* fileStream(base::TypedConfigurations::fileStream2912,128643
    inline std::size_t maxLogFileSize(base::TypedConfigurations::maxLogFileSize2916,128807
    inline std::size_t logFlushThreshold(base::TypedConfigurations::logFlushThreshold2920,128958
    Configurations* m_configurations;base::TypedConfigurations::m_configurations2925,129127
    std::map<base::TypedConfigurations::std::map2926,129165
    std::map<Level, bool> m_enabledMap;base::TypedConfigurations::m_enabledMap2926,129165
    std::map<base::TypedConfigurations::std::map2927,129205
    std::map<Level, bool> m_toFileMap;base::TypedConfigurations::m_toFileMap2927,129205
    std::map<base::TypedConfigurations::std::map2928,129244
    std::map<Level, std::string> m_filenameMap;base::TypedConfigurations::m_filenameMap2928,129244
    std::map<base::TypedConfigurations::std::map2929,129292
    std::map<Level, bool> m_toStandardOutputMap;base::TypedConfigurations::m_toStandardOutputMap2929,129292
    std::map<base::TypedConfigurations::std::map2930,129341
    std::map<Level, base::LogFormat> m_logFormatMap;base::TypedConfigurations::m_logFormatMap2930,129341
    std::map<base::TypedConfigurations::std::map2931,129394
    std::map<Level, base::MillisecondsWidth> m_millisecondsWidthMap;base::TypedConfigurations::m_millisecondsWidthMap2931,129394
    std::map<base::TypedConfigurations::std::map2932,129463
    std::map<Level, bool> m_performanceTrackingMap;base::TypedConfigurations::m_performanceTrackingMap2932,129463
    std::map<base::TypedConfigurations::std::map2933,129515
    std::map<Level, base::FileStreamPtr> m_fileStreamMap;base::TypedConfigurations::m_fileStreamMap2933,129515
    std::map<base::TypedConfigurations::std::map2934,129573
    std::map<Level, std::size_t> m_maxLogFileSizeMap;base::TypedConfigurations::m_maxLogFileSizeMap2934,129573
    std::map<base::TypedConfigurations::std::map2935,129627
    std::map<Level, std::size_t> m_logFlushThresholdMap;base::TypedConfigurations::m_logFlushThresholdMap2935,129627
    base::LogStreamsReferenceMap* m_logStreamsReference;base::TypedConfigurations::m_logStreamsReference2936,129684
    inline Conf_T getConfigByVal(base::TypedConfigurations::getConfigByVal2945,129979
    inline Conf_T& getConfigByRef(base::TypedConfigurations::getConfigByRef2951,130301
    inline Conf_T unsafeGetConfigByVal(base::TypedConfigurations::unsafeGetConfigByVal2957,130618
    inline Conf_T& unsafeGetConfigByRef(base::TypedConfigurations::unsafeGetConfigByRef2974,131372
    void setValue(base::TypedConfigurations::setValue2990,132082
    void build(base::TypedConfigurations::build3012,133107
    unsigned long getULong(base::TypedConfigurations::getULong3065,136712
    std::string resolveFilename(base::TypedConfigurations::resolveFilename3078,137220
    void insertFile(base::TypedConfigurations::insertFile3117,139363
    bool unsafeValidateFileRolling(base::TypedConfigurations::unsafeValidateFileRolling3154,141587
    bool validateFileRolling(base::TypedConfigurations::validateFileRolling3173,142591
class HitCounter 3179,142893
    HitCounter(HitCounter::HitCounter3181,142920
    HitCounter(HitCounter::HitCounter3187,143024
    HitCounter(HitCounter::HitCounter3193,143189
    HitCounter& operator=(HitCounter::operator=3199,143379
    virtual ~HitCounter(HitCounter::~HitCounter3206,143604
    inline void resetLocation(HitCounter::resetLocation3210,143697
    inline void validateHitCounts(HitCounter::validateHitCounts3216,143917
    inline const char* filename(HitCounter::filename3223,144148
    inline unsigned long int lineNumber(HitCounter::lineNumber3227,144228
    inline std::size_t hitCounts(HitCounter::hitCounts3231,144318
    inline void increment(HitCounter::increment3235,144400
    class Predicate HitCounter::Predicate3239,144464
        Predicate(HitCounter::Predicate::Predicate3241,144498
        inline bool operator()(HitCounter::Predicate::operator()3245,144655
        const char* m_filename;HitCounter::Predicate::m_filename3252,144915
        unsigned long int m_lineNumber;HitCounter::Predicate::m_lineNumber3253,144947
    const char* m_filename;HitCounter::m_filename3257,145004
    unsigned long int m_lineNumber;HitCounter::m_lineNumber3258,145032
    std::size_t m_hitCounts;HitCounter::m_hitCounts3259,145068
class RegisteredHitCounters 3262,145167
    bool validateEveryN(RegisteredHitCounters::validateEveryN3266,145526
    bool validateAfterN(RegisteredHitCounters::validateAfterN3279,146261
    bool validateNTimes(RegisteredHitCounters::validateNTimes3296,147140
    inline const base::HitCounter* getCounter(RegisteredHitCounters::getCounter3310,147751
enum class DispatchAction 3316,148004
    None DispatchAction::None3317,148055
    None = 1, NormalLog DispatchAction::NormalLog3317,148055
    None = 1, NormalLog = 2, SysLog DispatchAction::SysLog3317,148055
class Callback 3321,148141
    Callback(Callback::Callback3323,148206
    inline bool enabled(Callback::enabled3324,148246
    inline void setEnabled(Callback::setEnabled3325,148304
    bool m_enabled;Callback::m_enabled3332,148507
class LogDispatchData 3334,148530
    LogDispatchData(LogDispatchData::LogDispatchData3336,148562
    inline const LogMessage* logMessage(LogDispatchData::logMessage3337,148657
    inline base::DispatchAction dispatchAction(LogDispatchData::dispatchAction3338,148734
    LogMessage* m_logMessage;LogDispatchData::m_logMessage3340,148831
    base::DispatchAction m_dispatchAction;LogDispatchData::m_dispatchAction3341,148861
    inline void setLogMessage(LogDispatchData::setLogMessage3344,148943
    inline void setDispatchAction(LogDispatchData::setDispatchAction3345,149028
class LogDispatchCallback 3347,149141
class PerformanceTrackingCallback 3351,149254
class LogBuilder 3355,149388
    virtual ~LogBuilder(LogBuilder::~LogBuilder3357,149430
    void convertToColoredOutput(LogBuilder::convertToColoredOutput3359,149614
typedef std::shared_ptr<LogBuilder> LogBuilderPtr;3375,150368
class Logger 3379,150611
    Logger(Logger::Logger3381,150688
    Logger(Logger::Logger3390,151022
    Logger(Logger::Logger3400,151429
    Logger& operator=(Logger::operator=3411,151897
    virtual ~Logger(Logger::~Logger3423,152398
    virtual inline void log(Logger::log3427,152489
    void configure(Logger::configure3432,152660
    inline void reconfigure(Logger::reconfigure3453,153699
    inline const std::string& id(Logger::id3458,153851
    inline const std::string& parentApplicationName(Logger::parentApplicationName3462,153926
    inline void setParentApplicationName(Logger::setParentApplicationName3466,154039
    inline Configurations* configurations(Logger::configurations3470,154188
    inline base::TypedConfigurations* typedConfigurations(Logger::typedConfigurations3474,154279
    static inline bool isValidId(Logger::isValidId3478,154390
    inline void flush(Logger::flush3487,154767
    inline void flush(Logger::flush3497,155163
    inline bool isFlushNeeded(Logger::isFlushNeeded3507,155490
    inline LogBuilder* logBuilder(Logger::logBuilder3511,155648
    inline void setLogBuilder(Logger::setLogBuilder3515,155738
    inline bool enabled(Logger::enabled3519,155845
#   define LOGGER_LEVEL_WRITERS_SIGNATURES(3524,155993
    template <typename T,Logger::T3530,156237
#   undef LOGGER_LEVEL_WRITERS_SIGNATURES3542,156676
    LOGGER_LEVEL_WRITERS_SIGNATURES(3536,156420
    base::TypedConfigurations* m_typedConfigurations;Logger::m_typedConfigurations3546,156793
    base::type::stringstream_t m_stream;Logger::m_stream3547,156847
    std::string m_parentApplicationName;Logger::m_parentApplicationName3548,156888
    bool m_isConfigured;Logger::m_isConfigured3549,156929
    Configurations m_configurations;Logger::m_configurations3550,156954
    std::map<Logger::std::map3551,156991
    std::map<Level, unsigned int> m_unflushedCount;Logger::m_unflushedCount3551,156991
    base::LogStreamsReferenceMap* m_logStreamsReference;Logger::m_logStreamsReference3552,157043
    LogBuilderPtr m_logBuilder;Logger::m_logBuilder3553,157100
    template <typename T,Logger::T3570,157629
    template <typename T,Logger::T3576,157811
    void initUnflushedCount(Logger::initUnflushedCount3583,158025
    inline base::type::stringstream_t& stream(Logger::stream3592,158355
    void resolveLoggerFormatSpec(Logger::resolveLoggerFormatSpec3596,158441
namespace base 3606,158938
class RegisteredLoggers base::RegisteredLoggers3608,158985
    explicit RegisteredLoggers(base::RegisteredLoggers::RegisteredLoggers3610,159071
    virtual ~RegisteredLoggers(base::RegisteredLoggers::~RegisteredLoggers3615,159248
    inline void setDefaultConfigurations(base::RegisteredLoggers::setDefaultConfigurations3619,159314
    inline Configurations* defaultConfigurations(base::RegisteredLoggers::defaultConfigurations3624,159549
    Logger* get(base::RegisteredLoggers::get3628,159654
    bool remove(base::RegisteredLoggers::remove3644,160359
    inline bool has(base::RegisteredLoggers::has3655,160648
    inline void unregister(base::RegisteredLoggers::unregister3659,160742
    inline base::LogStreamsReferenceMap* logStreamsReference(base::RegisteredLoggers::logStreamsReference3664,160929
    inline void flushAll(base::RegisteredLoggers::flushAll3668,161044
    LogBuilderPtr m_defaultLogBuilder;base::RegisteredLoggers::m_defaultLogBuilder3679,161451
    Configurations m_defaultConfigurations;base::RegisteredLoggers::m_defaultConfigurations3680,161490
    base::LogStreamsReferenceMap m_logStreamsReference;base::RegisteredLoggers::m_logStreamsReference3681,161534
class VRegistry 3685,161682
    explicit VRegistry(VRegistry::VRegistry3687,161759
    inline void setLevel(VRegistry::setLevel3691,161945
    inline base::type::VerboseLevel level(VRegistry::level3701,162239
    inline void clearModules(VRegistry::clearModules3705,162326
    void setModules(VRegistry::setModules3710,162453
    bool allowed(VRegistry::allowed3782,165418
    inline const std::map<VRegistry::std::map3800,166140
    inline const std::map<std::string, base::type::VerboseLevel>& modules(VRegistry::modules3800,166140
    void setFromArgs(VRegistry::setFromArgs3804,166261
    inline bool vModulesEnabled(VRegistry::vModulesEnabled3820,167217
    base::type::VerboseLevel m_level;VRegistry::m_level3825,167352
    base::type::EnumType* m_pFlags;VRegistry::m_pFlags3826,167390
    std::map<VRegistry::std::map3827,167426
    std::map<std::string, base::type::VerboseLevel> m_modules;VRegistry::m_modules3827,167426
class LogMessage 3830,167513
    LogMessage(LogMessage::LogMessage3832,167540
    inline Level level(LogMessage::level3837,167920
    inline const std::string& file(LogMessage::file3838,167975
    inline unsigned long int line(LogMessage::line3839,168041
    inline const std::string& func(LogMessage::func3840,168116
    inline base::type::VerboseLevel verboseLevel(LogMessage::verboseLevel3841,168182
    inline Logger* logger(LogMessage::logger3842,168270
    inline const base::type::string_t& message(LogMessage::message3843,168329
    Level m_level;LogMessage::m_level3845,168419
    std::string m_file;LogMessage::m_file3846,168438
    unsigned long int m_line;LogMessage::m_line3847,168462
    std::string m_func;LogMessage::m_func3848,168492
    base::type::VerboseLevel m_verboseLevel;LogMessage::m_verboseLevel3849,168516
    Logger* m_logger;LogMessage::m_logger3850,168561
    base::type::string_t m_message;LogMessage::m_message3851,168583
namespace base 3853,168622
class AsyncLogItem base::AsyncLogItem3855,168662
    explicit AsyncLogItem(base::AsyncLogItem::AsyncLogItem3857,168691
    virtual ~AsyncLogItem(base::AsyncLogItem::~AsyncLogItem3859,168893
    inline LogMessage* logMessage(base::AsyncLogItem::logMessage3860,168924
    inline LogDispatchData* data(base::AsyncLogItem::data3861,168990
    inline base::type::string_t logLine(base::AsyncLogItem::logLine3862,169057
    LogMessage m_logMessage;base::AsyncLogItem::m_logMessage3864,169134
    LogDispatchData m_dispatchData;base::AsyncLogItem::m_dispatchData3865,169163
    base::type::string_t m_logLine;base::AsyncLogItem::m_logLine3866,169199
class AsyncLogQueue 3868,169238
    virtual ~AsyncLogQueue(AsyncLogQueue::~AsyncLogQueue3870,169305
    inline AsyncLogItem next(AsyncLogQueue::next3874,169396
    inline void push(AsyncLogQueue::push3881,169593
    inline void pop(AsyncLogQueue::pop3885,169732
    inline AsyncLogItem front(AsyncLogQueue::front3889,169845
    inline bool empty(AsyncLogQueue::empty3893,169977
    std::queue<AsyncLogItem> m_queue;AsyncLogQueue::m_queue3898,170110
class IWorker 3900,170151
    virtual ~IWorker(IWorker::~IWorker3902,170175
class Storage 3907,170307
    Storage(Storage::Storage3910,170405
    virtual ~Storage(Storage::~Storage3950,172567
    inline bool validateEveryNCounter(Storage::validateEveryNCounter3969,173587
    inline bool validateAfterNCounter(Storage::validateAfterNCounter3973,173786
    inline bool validateNTimesCounter(Storage::validateNTimesCounter3977,173981
    inline base::RegisteredHitCounters* hitCounters(Storage::hitCounters3981,174176
    inline base::RegisteredLoggers* registeredLoggers(Storage::registeredLoggers3985,174289
    inline base::VRegistry* vRegistry(Storage::vRegistry3989,174404
    inline base::AsyncLogQueue* asyncLogQueue(Storage::asyncLogQueue3994,174514
    inline const base::utils::CommandLineArgs* commandLineArgs(Storage::commandLineArgs3999,174643
    inline void addFlag(Storage::addFlag4003,174762
    inline void removeFlag(Storage::removeFlag4007,174859
    inline bool hasFlag(Storage::hasFlag4011,174962
    inline base::type::EnumType flags(Storage::flags4015,175071
    inline void setFlags(Storage::setFlags4019,175154
    inline void setPreRollOutCallback(Storage::setPreRollOutCallback4023,175241
    inline void unsetPreRollOutCallback(Storage::unsetPreRollOutCallback4027,175365
    inline PreRollOutCallback& preRollOutCallback(Storage::preRollOutCallback4031,175484
    inline bool hasCustomFormatSpecifier(Storage::hasCustomFormatSpecifier4035,175586
    inline void installCustomFormatSpecifier(Storage::installCustomFormatSpecifier4041,175880
    inline bool uninstallCustomFormatSpecifier(Storage::uninstallCustomFormatSpecifier4049,176220
    const std::vector<CustomFormatSpecifier>* customFormatSpecifiers(Storage::customFormatSpecifiers4060,176741
    inline void setLoggingLevel(Storage::setLoggingLevel4064,176873
    inline bool installLogDispatchCallback(Storage::installLogDispatchCallback4069,176985
    inline void uninstallLogDispatchCallback(Storage::uninstallLogDispatchCallback4074,177186
    inline T* logDispatchCallback(Storage::logDispatchCallback4078,177383
    inline bool installPerformanceTrackingCallback(Storage::installPerformanceTrackingCallback4083,177568
    inline void uninstallPerformanceTrackingCallback(Storage::uninstallPerformanceTrackingCallback4088,177793
    inline T* performanceTrackingCallback(Storage::performanceTrackingCallback4093,178016
    base::RegisteredHitCounters* m_registeredHitCounters;Storage::m_registeredHitCounters4097,178207
    base::RegisteredLoggers* m_registeredLoggers;Storage::m_registeredLoggers4098,178265
    base::type::EnumType m_flags;Storage::m_flags4099,178315
    base::VRegistry* m_vRegistry;Storage::m_vRegistry4100,178349
    base::AsyncLogQueue* m_asyncLogQueue;Storage::m_asyncLogQueue4102,178406
    base::IWorker* m_asyncDispatchWorker;Storage::m_asyncDispatchWorker4103,178448
    base::utils::CommandLineArgs m_commandLineArgs;Storage::m_commandLineArgs4105,178520
    PreRollOutCallback m_preRollOutCallback;Storage::m_preRollOutCallback4106,178572
    std::map<Storage::std::map4107,178617
    std::map<std::string, base::type::LogDispatchCallbackPtr> m_logDispatchCallbacks;Storage::m_logDispatchCallbacks4107,178617
    std::map<Storage::std::map4108,178703
    std::map<std::string, base::type::PerformanceTrackingCallbackPtr> m_performanceTrackingCallbacks;Storage::m_performanceTrackingCallbacks4108,178703
    std::vector<CustomFormatSpecifier> m_customFormatSpecifiers;Storage::m_customFormatSpecifiers4109,178805
    Level m_loggingLevel;Storage::m_loggingLevel4110,178870
    void setApplicationArguments(Storage::setApplicationArguments4120,179183
    inline void setApplicationArguments(Storage::setApplicationArguments4142,180283
    template <typename T,Storage::T4146,180426
    inline bool installCallback(Storage::installCallback4147,180467
    template <typename T,Storage::T4155,180729
    inline void uninstallCallback(Storage::uninstallCallback4156,180770
    template <typename T,Storage::T4162,180955
    inline T* callback(Storage::callback4163,180996
#define ELPP 4172,181348
class DefaultLogDispatchCallback 4173,181381
    void handle(DefaultLogDispatchCallback::handle4175,181456
    const LogDispatchData* m_data;DefaultLogDispatchCallback::m_data4181,181719
    void dispatch(DefaultLogDispatchCallback::dispatch4182,181754
class AsyncLogDispatchCallback 4238,184940
    void handle(AsyncLogDispatchCallback::handle4240,185013
class AsyncDispatchWorker 4253,185970
    AsyncDispatchWorker(AsyncDispatchWorker::AsyncDispatchWorker4255,186065
    virtual ~AsyncDispatchWorker(AsyncDispatchWorker::~AsyncDispatchWorker4259,186135
    inline bool clean(AsyncDispatchWorker::clean4266,186363
    inline void emptyQueue(AsyncDispatchWorker::emptyQueue4276,186645
    virtual inline void start(AsyncDispatchWorker::start4284,186879
    void handle(AsyncDispatchWorker::handle4291,187098
    void run(AsyncDispatchWorker::run4345,189796
    static void* runner(AsyncDispatchWorker::runner4352,189941
    void setContinueRunning(AsyncDispatchWorker::setContinueRunning4357,190073
    bool continueRunning(AsyncDispatchWorker::continueRunning4361,190228
    std::condition_variable cv;AsyncDispatchWorker::cv4365,190310
    bool m_continueRunning;AsyncDispatchWorker::m_continueRunning4366,190342
    base::threading::Mutex m_continueRunningMutex;AsyncDispatchWorker::m_continueRunningMutex4367,190370
namespace base 4371,190475
class DefaultLogBuilder base::DefaultLogBuilder4372,190492
    base::type::string_t build(base::DefaultLogBuilder::build4374,190546
class LogDispatcher 4455,195583
    LogDispatcher(LogDispatcher::LogDispatcher4457,195628
    void dispatch(LogDispatcher::dispatch4463,195858
    bool m_proceed;LogDispatcher::m_proceed4492,197043
    LogMessage m_logMessage;LogDispatcher::m_logMessage4493,197063
    base::DispatchAction m_dispatchAction;LogDispatcher::m_dispatchAction4494,197092
namespace workarounds 4503,197627
template <typename T,workarounds::T4505,197753
class IterableContainer workarounds::IterableContainer4506,197795
    typedef typename Container::iterator iterator;workarounds::IterableContainer::iterator4508,197829
    typedef typename Container::const_iterator const_iterator;workarounds::IterableContainer::const_iterator4509,197880
    IterableContainer(workarounds::IterableContainer::IterableContainer4510,197943
    virtual ~IterableContainer(workarounds::IterableContainer::~IterableContainer4511,197974
    iterator begin(workarounds::IterableContainer::begin4512,198014
    iterator end(workarounds::IterableContainer::end4513,198074
template<typename T,4518,198277
template<typename T, typename Container 4518,198277
template<typename T,4534,198973
template<typename T, typename Container 4534,198973
template<typename T,4550,199547
template<typename T, typename Container 4550,199547
class MessageBuilder 4568,200128
    MessageBuilder(MessageBuilder::MessageBuilder4570,200159
    void initialize(MessageBuilder::initialize4571,200250
#   define ELPP_SIMPLE_LOG(4577,200464
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4586,200730
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4603,201277
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4606,201388
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4624,201941
#define ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG(4628,202097
#define ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG(4633,202515
#define ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG(4638,202933
#define ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG(4643,203351
#define ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG(4648,203769
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4663,204630
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4669,205013
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4675,205414
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4681,205907
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4690,206306
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4698,206625
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4712,207309
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4720,207570
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4723,207682
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4726,207794
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4734,208081
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4742,208369
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4746,208494
    template <typename First,MessageBuilder::First4756,208923
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4757,208970
    template <typename K,MessageBuilder::K4765,209333
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4766,209371
    template <typename K,MessageBuilder::K4786,210381
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4787,210419
    template <typename K,MessageBuilder::K4791,210569
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4792,210607
    template <typename K,MessageBuilder::K4812,211623
    inline MessageBuilder& operator<<(MessageBuilder::operator<<4813,211661
#define MAKE_CONTAINERELPP_FRIENDLY(4837,213066
#   define ELPP_WX_PTR_ENABLED(4857,214081
#   define ELPP_WX_ENABLED(4858,214188
#   define ELPP_WX_HASH_MAP_ENABLED(4859,214290
#   define ELPP_WX_PTR_ENABLED(4862,214500
#   define ELPP_WX_ENABLED(4863,214546
#   define ELPP_WX_HASH_MAP_ENABLED(4864,214588
#undef ELPP_SIMPLE_LOG4869,214764
#undef ELPP_ITERATOR_CONTAINER_LOG_ONE_ARG4870,214787
#undef ELPP_ITERATOR_CONTAINER_LOG_TWO_ARG4871,214830
#undef ELPP_ITERATOR_CONTAINER_LOG_THREE_ARG4872,214873
#undef ELPP_ITERATOR_CONTAINER_LOG_FOUR_ARG4873,214918
#undef ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG4874,214962
    ELPP_SIMPLE_LOG(ELPP_ITERATOR_CONTAINER_LOG_FIVE_ARG4868,214730
    const base::type::char_t* m_containerLogSeperator;MessageBuilder::m_containerLogSeperator4877,215037
    inline MessageBuilder& writeIterator(MessageBuilder::writeIterator4880,215122
class NullWriter 4897,215855
    NullWriter(NullWriter::NullWriter4899,215897
    inline NullWriter& operator<<(NullWriter::operator<<4902,215946
    inline NullWriter& operator<<(NullWriter::operator<<4907,216071
class Writer 4912,216192
    Writer(Writer::Writer4914,216230
    virtual ~Writer(Writer::~Writer4921,216646
    inline Writer& operator<<(Writer::operator<<4926,216734
    inline Writer& operator<<(Writer::operator<<4935,216938
    Writer& construct(Writer::construct4944,217165
    Writer& construct(Writer::construct4951,217387
    Level m_level;Writer::m_level4969,218051
    const char* m_file;Writer::m_file4970,218070
    const unsigned long int m_line;Writer::m_line4971,218094
    const char* m_func;Writer::m_func4972,218130
    base::type::VerboseLevel m_verboseLevel;Writer::m_verboseLevel4973,218154
    Logger* m_logger;Writer::m_logger4974,218199
    bool m_proceed;Writer::m_proceed4975,218221
    base::MessageBuilder m_messageBuilder;Writer::m_messageBuilder4976,218241
    base::DispatchAction m_dispatchAction;Writer::m_dispatchAction4977,218284
    std::vector<std::string> m_loggerIds;Writer::m_loggerIds4978,218327
    void initializeLogger(Writer::initializeLogger4981,218400
    void processDispatch(Writer::processDispatch5009,219909
    void triggerDispatch(Writer::triggerDispatch5050,221361
class PErrorWriter 5072,222481
    PErrorWriter(PErrorWriter::PErrorWriter5074,222532
    virtual ~PErrorWriter(PErrorWriter::~PErrorWriter5080,222853
    template <typename T,5095,223350
    void Logger::log_(5096,223394
    inline void Logger::log_(5117,224235
    template <typename T,5129,224771
    void Logger::log(5130,224815
    inline void Logger::log(5135,225035
    template <typename T,5140,225208
    inline void Logger::verbose(5141,225252
    inline void Logger::verbose(5146,225499
    template <typename T,5151,225677
    inline void Logger::verbose(5152,225721
    inline void Logger::verbose(5156,225847
#   define LOGGER_LEVEL_WRITERS(5160,225949
#   define LOGGER_LEVEL_WRITERS_DISABLED(5169,226319
#   undef LOGGER_LEVEL_WRITERS5209,227598
#   undef LOGGER_LEVEL_WRITERS_DISABLED5210,227629
#   define ELPP_VARIADIC_FUNC_MSVC(5213,227736
#   define ELPP_VARIADIC_FUNC_MSVC_RUN(5214,227833
#   define el_getVALength(5215,227952
#      define el_getVALength(5219,228125
#      define el_getVALength(5221,228237
#define el_resolveVALength(5224,228405
#define ELPP_WRITE_LOG(5225,228487
#define ELPP_WRITE_LOG_IF(5227,228665
#define ELPP_WRITE_LOG_EVERY_N(5229,228872
#define ELPP_WRITE_LOG_AFTER_N(5232,229141
#define ELPP_WRITE_LOG_N_TIMES(5235,229396
#undef ELPP_CURR_FILE_PERFORMANCE_LOGGER5238,229651
#   define ELPP_CURR_FILE_PERFORMANCE_LOGGER 5240,229729
#   define ELPP_CURR_FILE_PERFORMANCE_LOGGER 5242,229804
class PerformanceTrackingData 5244,229895
    enum class DataType PerformanceTrackingData::DataType5246,229935
        Checkpoint PerformanceTrackingData::DataType::Checkpoint5247,229984
        Checkpoint = 1, Complete PerformanceTrackingData::DataType::Complete5247,229984
    explicit PerformanceTrackingData(PerformanceTrackingData::PerformanceTrackingData5250,230130
    inline const base::PerformanceTracker* performanceTracker(PerformanceTrackingData::performanceTracker5256,230515
    inline PerformanceTrackingData::DataType dataType(PerformanceTrackingData::dataType5257,230622
    inline bool firstCheckpoint(PerformanceTrackingData::firstCheckpoint5258,230711
    inline std::string checkpointId(PerformanceTrackingData::checkpointId5259,230785
    inline const char* file(PerformanceTrackingData::file5260,230860
    inline unsigned long int line(PerformanceTrackingData::line5261,230919
    inline const char* func(PerformanceTrackingData::func5262,230984
    inline const base::type::string_t* formattedTimeTaken(PerformanceTrackingData::formattedTimeTaken5263,231043
    base::PerformanceTracker* m_performanceTracker;PerformanceTrackingData::m_performanceTracker5266,231204
    base::type::string_t m_formattedTimeTaken;PerformanceTrackingData::m_formattedTimeTaken5267,231256
    PerformanceTrackingData::DataType m_dataType;PerformanceTrackingData::m_dataType5268,231303
    bool m_firstCheckpoint;PerformanceTrackingData::m_firstCheckpoint5269,231353
    std::string m_checkpointId;PerformanceTrackingData::m_checkpointId5270,231381
    const char* m_file;PerformanceTrackingData::m_file5271,231413
    unsigned long int m_line;PerformanceTrackingData::m_line5272,231437
    const char* m_func;PerformanceTrackingData::m_func5273,231467
    inline void init(PerformanceTrackingData::init5274,231495
namespace base 5281,231747
class PerformanceTracker base::PerformanceTracker5284,231946
    PerformanceTracker(base::PerformanceTracker::PerformanceTracker5286,232035
    PerformanceTracker(base::PerformanceTracker::PerformanceTracker5303,233248
    virtual ~PerformanceTracker(base::PerformanceTracker::~PerformanceTracker5308,233665
    void checkpoint(base::PerformanceTracker::checkpoint5333,234902
    inline Level level(base::PerformanceTracker::level5366,236550
    std::string m_blockName;base::PerformanceTracker::m_blockName5368,236614
    base::TimestampUnit m_timestampUnit;base::PerformanceTracker::m_timestampUnit5369,236643
    std::string m_loggerId;base::PerformanceTracker::m_loggerId5370,236684
    bool m_scopedLog;base::PerformanceTracker::m_scopedLog5371,236712
    Level m_level;base::PerformanceTracker::m_level5372,236734
    bool m_hasChecked;base::PerformanceTracker::m_hasChecked5373,236753
    std::string m_lastCheckpointId;base::PerformanceTracker::m_lastCheckpointId5374,236776
    bool m_enabled;base::PerformanceTracker::m_enabled5375,236812
    struct timeval m_startTime,base::PerformanceTracker::m_startTime5376,236832
    struct timeval m_startTime, m_endTime,base::PerformanceTracker::m_endTime5376,236832
    struct timeval m_startTime, m_endTime, m_lastCheckpointTime;base::PerformanceTracker::m_lastCheckpointTime5376,236832
    const inline base::type::string_t getFormattedTimeTaken(base::PerformanceTracker::getFormattedTimeTaken5383,237035
    const base::type::string_t getFormattedTimeTaken(base::PerformanceTracker::getFormattedTimeTaken5387,237167
    virtual inline void log(base::PerformanceTracker::log5398,237775
class DefaultPerformanceTrackingCallback 5402,237890
    void handle(DefaultPerformanceTrackingCallback::handle5404,237981
    const PerformanceTrackingData* m_data;DefaultPerformanceTrackingCallback::m_data5430,239584
inline const std::string* PerformanceTrackingData::blockName(5433,239651
inline const struct timeval* PerformanceTrackingData::startTime(5436,239803
inline const struct timeval* PerformanceTrackingData::endTime(5439,239961
inline const struct timeval* PerformanceTrackingData::lastCheckpointTime(5442,240115
inline const std::string& PerformanceTrackingData::loggerId(5445,240291
namespace base 5446,240408
namespace debug base::debug5448,240511
class StackTrace base::debug::StackTrace5449,240529
    class StackTraceEntry base::debug::StackTrace::StackTraceEntry5453,240718
        StackTraceEntry(base::debug::StackTrace::StackTraceEntry::StackTraceEntry5455,240758
        StackTraceEntry(base::debug::StackTrace::StackTraceEntry::StackTraceEntry5462,241082
        std::size_t m_index;base::debug::StackTrace::StackTraceEntry::m_index5466,241220
        std::string m_location;base::debug::StackTrace::StackTraceEntry::m_location5467,241249
        std::string m_demangled;base::debug::StackTrace::StackTraceEntry::m_demangled5468,241281
        std::string m_hex;base::debug::StackTrace::StackTraceEntry::m_hex5469,241314
        std::string m_addr;base::debug::StackTrace::StackTraceEntry::m_addr5470,241341
        friend std::ostream& operator<<(base::debug::StackTrace::StackTraceEntry::operator<<5471,241369
    StackTrace(base::debug::StackTrace::StackTrace5481,241736
    virtual ~StackTrace(base::debug::StackTrace::~StackTrace5485,241789
    inline std::vector<StackTraceEntry>& getLatestStack(base::debug::StackTrace::getLatestStack5488,241828
    friend inline std::ostream& operator<<(base::debug::StackTrace::operator<<5492,241923
    std::vector<StackTraceEntry> m_stack;base::debug::StackTrace::m_stack5501,242210
    void generateNew(base::debug::StackTrace::generateNew5503,242253
static std::string crashReason(5557,244541
static void logCrashReason(5577,245373
static inline void crashAbort(5590,245892
static inline void defaultCrashHandler(5596,246137
class CrashHandler 5601,246351
    typedef void (*Handler)CrashHandler::Handler5603,246395
    explicit CrashHandler(CrashHandler::CrashHandler5605,246430
    explicit CrashHandler(CrashHandler::CrashHandler5610,246562
    void setHandler(CrashHandler::setHandler5613,246651
    Handler m_handler;CrashHandler::m_handler5626,247067
#define MAKE_LOGGABLE(5631,247185
class SysLogInitializer 5634,247475
    SysLogInitializer(SysLogInitializer::SysLogInitializer5636,247509
    virtual ~SysLogInitializer(SysLogInitializer::~SysLogInitializer5645,247809
#define ELPP_INITIALIZE_SYSLOG(5651,247934
class Helpers 5653,248069
    static inline void setStorage(Helpers::setStorage5656,248170
    static inline base::type::StoragePointer storage(Helpers::storage5660,248312
    static inline void setArgs(Helpers::setArgs5664,248494
    static inline void setArgs(Helpers::setArgs5668,248655
    static inline void setCrashHandler(Helpers::setCrashHandler5674,249037
    static inline void crashAbort(Helpers::crashAbort5679,249288
    static inline void logCrashReason(Helpers::logCrashReason5697,250075
    static inline void installPreRollOutCallback(Helpers::installPreRollOutCallback5703,250502
    static inline void uninstallPreRollOutCallback(Helpers::uninstallPreRollOutCallback5707,250689
    static inline bool installLogDispatchCallback(Helpers::installLogDispatchCallback5712,250923
    static inline void uninstallLogDispatchCallback(Helpers::uninstallLogDispatchCallback5717,251134
    static inline T* logDispatchCallback(Helpers::logDispatchCallback5721,251294
    static inline bool installPerformanceTrackingCallback(Helpers::installPerformanceTrackingCallback5726,251566
    static inline void uninstallPerformanceTrackingCallback(Helpers::uninstallPerformanceTrackingCallback5731,251805
    static inline T* performanceTrackingCallback(Helpers::performanceTrackingCallback5735,251981
    static std::string convertTemplateToStdString(Helpers::convertTemplateToStdString5740,252272
    static inline const el::base::utils::CommandLineArgs* commandLineArgs(Helpers::commandLineArgs5760,253037
    static inline void installCustomFormatSpecifier(Helpers::installCustomFormatSpecifier5764,253231
    static inline bool uninstallCustomFormatSpecifier(Helpers::uninstallCustomFormatSpecifier5768,253478
    static inline bool hasCustomFormatSpecifier(Helpers::hasCustomFormatSpecifier5772,253707
    static inline void validateFileRolling(Helpers::validateFileRolling5775,253856
class Loggers 5781,254145
    static inline Logger* getLogger(Loggers::getLogger5784,254242
    static inline bool unregisterLogger(Loggers::unregisterLogger5790,254658
    static inline bool hasLogger(Loggers::hasLogger5795,254916
    static inline Logger* reconfigureLogger(Loggers::reconfigureLogger5800,255174
    static inline Logger* reconfigureLogger(Loggers::reconfigureLogger5806,255477
    static inline Logger* reconfigureLogger(Loggers::reconfigureLogger5810,255743
    static inline void reconfigureAllLoggers(Loggers::reconfigureAllLoggers5821,256236
    static inline void reconfigureAllLoggers(Loggers::reconfigureAllLoggers5828,256626
    static inline void reconfigureAllLoggers(Loggers::reconfigureAllLoggers5832,256903
    static inline void setDefaultConfigurations(Loggers::setDefaultConfigurations5842,257482
    static inline const Configurations* defaultConfigurations(Loggers::defaultConfigurations5849,257845
    static inline const base::LogStreamsReferenceMap* logStreamsReference(Loggers::logStreamsReference5853,258058
    static base::TypedConfigurations defaultTypedConfigurations(Loggers::defaultTypedConfigurations5857,258284
    static inline std::vector<std::string>* populateAllLoggerIds(Loggers::populateAllLoggerIds5864,258643
    static void configureFromGlobal(Loggers::configureFromGlobal5873,259099
    static inline bool configureFromArg(Loggers::configureFromArg5917,261311
    static inline void flushAll(Loggers::flushAll5929,261856
    static inline void addFlag(Loggers::addFlag5933,261999
    static inline void removeFlag(Loggers::removeFlag5937,262138
    static inline bool hasFlag(Loggers::hasFlag5941,262294
    class ScopedAddFlag Loggers::ScopedAddFlag5945,262447
        ScopedAddFlag(Loggers::ScopedAddFlag::ScopedAddFlag5947,262485
        ~ScopedAddFlag(Loggers::ScopedAddFlag::~ScopedAddFlag5948,262570
        LoggingFlag m_flag;Loggers::ScopedAddFlag::m_flag5950,262645
    class ScopedRemoveFlag Loggers::ScopedRemoveFlag5953,262739
        ScopedRemoveFlag(Loggers::ScopedRemoveFlag::ScopedRemoveFlag5955,262780
        ~ScopedRemoveFlag(Loggers::ScopedRemoveFlag::~ScopedRemoveFlag5956,262871
        LoggingFlag m_flag;Loggers::ScopedRemoveFlag::m_flag5958,262946
    static inline void setLoggingLevel(Loggers::setLoggingLevel5961,263075
    static inline void setVerboseLevel(Loggers::setVerboseLevel5965,263218
    static inline base::type::VerboseLevel verboseLevel(Loggers::verboseLevel5969,263383
    static inline void setVModules(Loggers::setVModules5973,263548
    static inline void clearVModules(Loggers::clearVModules5979,263754
class VersionInfo 5983,263851
    static inline const std::string version(VersionInfo::version5986,263937
    static inline const std::string releaseDate(VersionInfo::releaseDate5988,264066
#undef VLOG_IS_ON5991,264188
#define VLOG_IS_ON(5993,264292
#undef TIMED_BLOCK5994,264378
#undef TIMED_SCOPE5995,264397
#undef TIMED_FUNC5996,264416
#undef ELPP_MIN_UNIT5997,264434
#   define ELPP_MIN_UNIT 5999,264498
#   define ELPP_MIN_UNIT 6001,264566
#define TIMED_SCOPE(6010,265084
#define TIMED_BLOCK(6011,265179
#define TIMED_FUNC(6019,265695
#undef PERFORMANCE_CHECKPOINT6020,265747
#undef PERFORMANCE_CHECKPOINT_WITH_ID6021,265777
#define PERFORMANCE_CHECKPOINT(6022,265815
#define PERFORMANCE_CHECKPOINT_WITH_ID(6023,265912
#undef ELPP_COUNTER6024,266010
#undef ELPP_COUNTER_POS6025,266030
#define ELPP_COUNTER 6027,266096
#define ELPP_COUNTER_POS 6029,266248
#undef INFO6031,266370
#undef WARNING6032,266382
#undef DEBUG6033,266397
#undef ERROR6034,266410
#undef FATAL6035,266423
#undef TRACE6036,266436
#undef VERBOSE6037,266449
#undef CINFO6039,266482
#undef CWARNING6040,266495
#undef CDEBUG6041,266511
#undef CFATAL6042,266525
#undef CERROR6043,266539
#undef CTRACE6044,266553
#undef CVERBOSE6045,266567
#undef CINFO_IF6046,266583
#undef CWARNING_IF6047,266599
#undef CDEBUG_IF6048,266618
#undef CERROR_IF6049,266635
#undef CFATAL_IF6050,266652
#undef CTRACE_IF6051,266669
#undef CVERBOSE_IF6052,266686
#undef CINFO_EVERY_N6053,266705
#undef CWARNING_EVERY_N6054,266726
#undef CDEBUG_EVERY_N6055,266750
#undef CERROR_EVERY_N6056,266772
#undef CFATAL_EVERY_N6057,266794
#undef CTRACE_EVERY_N6058,266816
#undef CVERBOSE_EVERY_N6059,266838
#undef CINFO_AFTER_N6060,266862
#undef CWARNING_AFTER_N6061,266883
#undef CDEBUG_AFTER_N6062,266907
#undef CERROR_AFTER_N6063,266929
#undef CFATAL_AFTER_N6064,266951
#undef CTRACE_AFTER_N6065,266973
#undef CVERBOSE_AFTER_N6066,266995
#undef CINFO_N_TIMES6067,267019
#undef CWARNING_N_TIMES6068,267040
#undef CDEBUG_N_TIMES6069,267064
#undef CERROR_N_TIMES6070,267086
#undef CFATAL_N_TIMES6071,267108
#undef CTRACE_N_TIMES6072,267130
#undef CVERBOSE_N_TIMES6073,267152
#   define CINFO(6076,267209
#   define CINFO(6078,267330
#   define CWARNING(6081,267445
#   define CWARNING(6083,267572
#   define CDEBUG(6086,267691
#   define CDEBUG(6088,267814
#   define CERROR(6091,267929
#   define CERROR(6093,268052
#   define CFATAL(6096,268167
#   define CFATAL(6098,268290
#   define CTRACE(6101,268405
#   define CTRACE(6103,268528
#   define CVERBOSE(6106,268645
#   define CVERBOSE(6109,268875
#   define CINFO_IF(6113,269021
#   define CINFO_IF(6116,269184
#   define CWARNING_IF(6119,269314
#   define CWARNING_IF(6122,269482
#   define CDEBUG_IF(6125,269616
#   define CDEBUG_IF(6128,269780
#   define CERROR_IF(6131,269910
#   define CERROR_IF(6134,270074
#   define CFATAL_IF(6137,270204
#   define CFATAL_IF(6140,270368
#   define CTRACE_IF(6143,270498
#   define CTRACE_IF(6146,270662
#   define CVERBOSE_IF(6149,270794
#   define CVERBOSE_IF(6152,271056
#   define CINFO_EVERY_N(6156,271216
#   define CINFO_EVERY_N(6159,271382
#   define CWARNING_EVERY_N(6162,271515
#   define CWARNING_EVERY_N(6165,271687
#   define CDEBUG_EVERY_N(6168,271824
#   define CDEBUG_EVERY_N(6171,271992
#   define CERROR_EVERY_N(6174,272125
#   define CERROR_EVERY_N(6177,272293
#   define CFATAL_EVERY_N(6180,272426
#   define CFATAL_EVERY_N(6183,272594
#   define CTRACE_EVERY_N(6186,272727
#   define CTRACE_EVERY_N(6189,272895
#   define CVERBOSE_EVERY_N(6192,273030
#   define CVERBOSE_EVERY_N(6195,273236
#   define CINFO_AFTER_N(6199,273396
#   define CINFO_AFTER_N(6202,273548
#   define CWARNING_AFTER_N(6205,273674
#   define CWARNING_AFTER_N(6208,273832
#   define CDEBUG_AFTER_N(6211,273962
#   define CDEBUG_AFTER_N(6214,274116
#   define CERROR_AFTER_N(6217,274242
#   define CERROR_AFTER_N(6220,274396
#   define CFATAL_AFTER_N(6223,274522
#   define CFATAL_AFTER_N(6226,274676
#   define CTRACE_AFTER_N(6229,274802
#   define CTRACE_AFTER_N(6232,274956
#   define CVERBOSE_AFTER_N(6235,275084
#   define CVERBOSE_AFTER_N(6238,275276
#   define CINFO_N_TIMES(6242,275429
#   define CINFO_N_TIMES(6245,275581
#   define CWARNING_N_TIMES(6248,275707
#   define CWARNING_N_TIMES(6251,275865
#   define CDEBUG_N_TIMES(6254,275995
#   define CDEBUG_N_TIMES(6257,276149
#   define CERROR_N_TIMES(6260,276275
#   define CERROR_N_TIMES(6263,276429
#   define CFATAL_N_TIMES(6266,276555
#   define CFATAL_N_TIMES(6269,276709
#   define CTRACE_N_TIMES(6272,276835
#   define CTRACE_N_TIMES(6275,276989
#   define CVERBOSE_N_TIMES(6278,277117
#   define CVERBOSE_N_TIMES(6281,277309
#undef CLOG6287,277517
#undef CLOG_VERBOSE6288,277529
#undef CVLOG6289,277549
#undef CLOG_IF6290,277562
#undef CLOG_VERBOSE_IF6291,277577
#undef CVLOG_IF6292,277600
#undef CLOG_EVERY_N6293,277616
#undef CVLOG_EVERY_N6294,277636
#undef CLOG_AFTER_N6295,277657
#undef CVLOG_AFTER_N6296,277677
#undef CLOG_N_TIMES6297,277698
#undef CVLOG_N_TIMES6298,277718
#define CLOG(6300,277754
#define CVLOG(6302,277861
#define CLOG_IF(6304,277993
#define CVLOG_IF(6306,278130
#define CLOG_EVERY_N(6309,278300
#define CVLOG_EVERY_N(6311,278431
#define CLOG_AFTER_N(6313,278570
#define CVLOG_AFTER_N(6315,278701
#define CLOG_N_TIMES(6317,278840
#define CVLOG_N_TIMES(6319,278971
#undef LOG6325,279207
#undef VLOG6326,279218
#undef LOG_IF6327,279230
#undef VLOG_IF6328,279244
#undef LOG_EVERY_N6329,279259
#undef VLOG_EVERY_N6330,279278
#undef LOG_AFTER_N6331,279298
#undef VLOG_AFTER_N6332,279317
#undef LOG_N_TIMES6333,279337
#undef VLOG_N_TIMES6334,279356
#undef ELPP_CURR_FILE_LOGGER_ID6335,279376
#   define ELPP_CURR_FILE_LOGGER_ID 6337,279441
#   define ELPP_CURR_FILE_LOGGER_ID 6339,279503
#undef ELPP_TRACE6341,279581
#define ELPP_TRACE 6342,279599
#define LOG(6344,279671
#define VLOG(6345,279728
#define LOG_IF(6347,279809
#define VLOG_IF(6348,279894
#define LOG_EVERY_N(6350,280008
#define VLOG_EVERY_N(6351,280087
#define LOG_AFTER_N(6352,280170
#define VLOG_AFTER_N(6353,280249
#define LOG_N_TIMES(6354,280332
#define VLOG_N_TIMES(6355,280411
#undef CPLOG6357,280512
#undef CPLOG_IF6358,280525
#undef PLOG6359,280541
#undef PLOG_IF6360,280553
#undef DCPLOG6361,280568
#undef DCPLOG_IF6362,280582
#undef DPLOG6363,280599
#undef DPLOG_IF6364,280612
#define CPLOG(6365,280628
#define CPLOG_IF(6367,280742
#define DCPLOG(6369,280886
#define DCPLOG_IF(6371,281021
#define PLOG(6373,281188
#define PLOG_IF(6374,281247
#define DPLOG(6375,281334
#define DPLOG_IF(6376,281395
#undef CSYSLOG6378,281504
#undef CSYSLOG_IF6379,281519
#undef CSYSLOG_EVERY_N6380,281537
#undef CSYSLOG_AFTER_N6381,281560
#undef CSYSLOG_N_TIMES6382,281583
#undef SYSLOG6383,281606
#undef SYSLOG_IF6384,281620
#undef SYSLOG_EVERY_N6385,281637
#undef SYSLOG_AFTER_N6386,281659
#undef SYSLOG_N_TIMES6387,281681
#undef DCSYSLOG6388,281703
#undef DCSYSLOG_IF6389,281719
#undef DCSYSLOG_EVERY_N6390,281738
#undef DCSYSLOG_AFTER_N6391,281762
#undef DCSYSLOG_N_TIMES6392,281786
#undef DSYSLOG6393,281810
#undef DSYSLOG_IF6394,281825
#undef DSYSLOG_EVERY_N6395,281843
#undef DSYSLOG_AFTER_N6396,281866
#undef DSYSLOG_N_TIMES6397,281889
#   define CSYSLOG(6399,281937
#   define CSYSLOG_IF(6401,282051
#   define CSYSLOG_EVERY_N(6403,282195
#   define CSYSLOG_AFTER_N(6404,282324
#   define CSYSLOG_N_TIMES(6405,282453
#   define SYSLOG(6406,282582
#   define SYSLOG_IF(6407,282657
#   define SYSLOG_EVERY_N(6408,282760
#   define SYSLOG_AFTER_N(6409,282857
#   define SYSLOG_N_TIMES(6410,282954
#   define DCSYSLOG(6411,283051
#   define DCSYSLOG_IF(6412,283177
#   define DCSYSLOG_EVERY_N(6414,283344
#   define DCSYSLOG_AFTER_N(6416,283503
#   define DCSYSLOG_N_TIMES(6418,283662
#   define DSYSLOG(6420,283821
#   define DSYSLOG_IF(6421,283898
#   define DSYSLOG_EVERY_N(6422,284003
#   define DSYSLOG_AFTER_N(6423,284102
#   define DSYSLOG_N_TIMES(6424,284201
#   define CSYSLOG(6426,284306
#   define CSYSLOG_IF(6427,284360
#   define CSYSLOG_EVERY_N(6428,284428
#   define CSYSLOG_AFTER_N(6429,284493
#   define CSYSLOG_N_TIMES(6430,284558
#   define SYSLOG(6431,284623
#   define SYSLOG_IF(6432,284671
#   define SYSLOG_EVERY_N(6433,284733
#   define SYSLOG_AFTER_N(6434,284792
#   define SYSLOG_N_TIMES(6435,284851
#   define DCSYSLOG(6436,284910
#   define DCSYSLOG_IF(6437,284965
#   define DCSYSLOG_EVERY_N(6438,285034
#   define DCSYSLOG_AFTER_N(6439,285100
#   define DCSYSLOG_N_TIMES(6440,285166
#   define DSYSLOG(6441,285232
#   define DSYSLOG_IF(6442,285281
#   define DSYSLOG_EVERY_N(6443,285344
#   define DSYSLOG_AFTER_N(6444,285404
#   define DSYSLOG_N_TIMES(6445,285464
#undef DCLOG6451,285640
#undef DCVLOG6452,285653
#undef DCLOG_IF6453,285667
#undef DCVLOG_IF6454,285683
#undef DCLOG_EVERY_N6455,285700
#undef DCVLOG_EVERY_N6456,285721
#undef DCLOG_AFTER_N6457,285743
#undef DCVLOG_AFTER_N6458,285764
#undef DCLOG_N_TIMES6459,285786
#undef DCVLOG_N_TIMES6460,285807
#define DCLOG(6462,285844
#define DCLOG_VERBOSE(6463,285915
#define DCVLOG(6464,286004
#define DCLOG_IF(6466,286099
#define DCVLOG_IF(6467,286198
#define DCLOG_EVERY_N(6469,286326
#define DCVLOG_EVERY_N(6470,286419
#define DCLOG_AFTER_N(6471,286516
#define DCVLOG_AFTER_N(6472,286609
#define DCLOG_N_TIMES(6473,286706
#define DCVLOG_N_TIMES(6474,286799
#undef DLOG6479,287004
#undef DVLOG6480,287016
#undef DLOG_IF6481,287029
#undef DVLOG_IF6482,287044
#undef DLOG_EVERY_N6483,287060
#undef DVLOG_EVERY_N6484,287080
#undef DLOG_AFTER_N6485,287101
#undef DVLOG_AFTER_N6486,287121
#undef DLOG_N_TIMES6487,287142
#undef DVLOG_N_TIMES6488,287162
#define DLOG(6490,287198
#define DVLOG(6491,287257
#define DLOG_IF(6493,287340
#define DVLOG_IF(6494,287427
#define DLOG_EVERY_N(6496,287543
#define DVLOG_EVERY_N(6497,287624
#define DLOG_AFTER_N(6498,287709
#define DVLOG_AFTER_N(6499,287790
#define DLOG_N_TIMES(6500,287875
#define DVLOG_N_TIMES(6501,287956
#undef CCHECK6503,288057
#undef CPCHECK6504,288071
#undef CCHECK_EQ6505,288086
#undef CCHECK_NE6506,288103
#undef CCHECK_LT6507,288120
#undef CCHECK_GT6508,288137
#undef CCHECK_LE6509,288154
#undef CCHECK_GE6510,288171
#undef CCHECK_BOUNDS6511,288188
#undef CCHECK_NOTNULL6512,288209
#undef CCHECK_STRCASEEQ6513,288231
#undef CCHECK_STRCASENE6514,288255
#undef CHECK6515,288279
#undef PCHECK6516,288292
#undef CHECK_EQ6517,288306
#undef CHECK_NE6518,288322
#undef CHECK_LT6519,288338
#undef CHECK_GT6520,288354
#undef CHECK_LE6521,288370
#undef CHECK_GE6522,288386
#undef CHECK_BOUNDS6523,288402
#undef CHECK_NOTNULL6524,288422
#undef CHECK_STRCASEEQ6525,288443
#undef CHECK_STRCASENE6526,288466
#define CCHECK(6527,288489
#define CPCHECK(6528,288605
#define CHECK(6529,288723
#define PCHECK(6530,288792
#define CCHECK_EQ(6531,288863
#define CCHECK_NE(6532,288920
#define CCHECK_LT(6533,288977
#define CCHECK_GT(6534,289033
#define CCHECK_LE(6535,289089
#define CCHECK_GE(6536,289146
#define CCHECK_BOUNDS(6537,289203
#define CHECK_EQ(6538,289291
#define CHECK_NE(6539,289356
#define CHECK_LT(6540,289421
#define CHECK_GT(6541,289486
#define CHECK_LE(6542,289551
#define CHECK_GE(6543,289616
#define CHECK_BOUNDS(6544,289681
namespace el 6545,289772
namespace base el::base6546,289787
namespace utils el::base::utils6547,289804
static T* checkNotNull(el::base::utils::checkNotNull6549,289844
#define CCHECK_NOTNULL(6556,290093
#define CCHECK_STREQ(6557,290180
#define CCHECK_STRNE(6559,290375
#define CCHECK_STRCASEEQ(6561,290569
#define CCHECK_STRCASENE(6563,290772
#define CHECK_NOTNULL(6565,290974
#define CHECK_STREQ(6566,291047
#define CHECK_STRNE(6567,291130
#define CHECK_STRCASEEQ(6568,291213
#define CHECK_STRCASENE(6569,291304
#undef DCCHECK6570,291395
#undef DCCHECK_EQ6571,291410
#undef DCCHECK_NE6572,291428
#undef DCCHECK_LT6573,291446
#undef DCCHECK_GT6574,291464
#undef DCCHECK_LE6575,291482
#undef DCCHECK_GE6576,291500
#undef DCCHECK_BOUNDS6577,291518
#undef DCCHECK_NOTNULL6578,291540
#undef DCCHECK_STRCASEEQ6579,291563
#undef DCCHECK_STRCASENE6580,291588
#undef DCPCHECK6581,291613
#undef DCHECK6582,291629
#undef DCHECK_EQ6583,291643
#undef DCHECK_NE6584,291660
#undef DCHECK_LT6585,291677
#undef DCHECK_GT6586,291694
#undef DCHECK_LE6587,291711
#undef DCHECK_GE6588,291728
#undef DCHECK_BOUNDS_6589,291745
#undef DCHECK_NOTNULL6590,291767
#undef DCHECK_STRCASEEQ6591,291789
#undef DCHECK_STRCASENE6592,291813
#undef DPCHECK6593,291837
#define DCCHECK(6594,291852
#define DCCHECK_EQ(6595,291935
#define DCCHECK_NE(6596,292014
#define DCCHECK_LT(6597,292093
#define DCCHECK_GT(6598,292172
#define DCCHECK_LE(6599,292251
#define DCCHECK_GE(6600,292330
#define DCCHECK_BOUNDS(6601,292409
#define DCCHECK_NOTNULL(6602,292514
#define DCCHECK_STREQ(6603,292601
#define DCCHECK_STRNE(6604,292698
#define DCCHECK_STRCASEEQ(6605,292795
#define DCCHECK_STRCASENE(6606,292900
#define DCPCHECK(6607,293005
#define DCHECK(6608,293090
#define DCHECK_EQ(6609,293161
#define DCHECK_NE(6610,293228
#define DCHECK_LT(6611,293295
#define DCHECK_GT(6612,293362
#define DCHECK_LE(6613,293429
#define DCHECK_GE(6614,293496
#define DCHECK_BOUNDS(6615,293563
#define DCHECK_NOTNULL(6616,293656
#define DCHECK_STREQ(6617,293731
#define DCHECK_STRNE(6618,293816
#define DCHECK_STRCASEEQ(6619,293901
#define DCHECK_STRCASENE(6620,293994
#define DPCHECK(6621,294087
#   define ELPP_USE_DEF_CRASH_HANDLER 6623,294209
#   define ELPP_USE_DEF_CRASH_HANDLER 6625,294259
#define ELPP_CRASH_HANDLER_INIT6627,294358
#define ELPP_INIT_EASYLOGGINGPP(6628,294390
#   define INITIALIZE_EASYLOGGINGPP\INITIALIZE_EASYLOGGINGPP6638,294686
#   define INITIALIZE_EASYLOGGINGPP\INITIALIZE_EASYLOGGINGPP6643,294942
#define INITIALIZE_NULL_EASYLOGGINGPP\INITIALIZE_NULL_EASYLOGGINGPP6646,295117
#define SHARE_EASYLOGGINGPP(6655,295485
#   define START_EASYLOGGINGPP(6664,295782
#   define START_EASYLOGGINGPP(6666,295902

client_simulator/inc/socket.h,403
#define _SOCKET_H_2,19
using namespace std;16,244
class CommonSocket 18,266
    int _socket_id;CommonSocket::_socket_id20,300
    int _socket_type;CommonSocket::_socket_type21,320
    bool _opened;CommonSocket::_opened22,342
    bool _binded;CommonSocket::_binded23,360
class TCP 32,490
    struct sockaddr_in _sockaddr_in;TCP::_sockaddr_in35,535
    uint32_t _passwd;TCP::_passwd36,572

client_simulator/inc/VRVProtocolEx.hxx,1038
#define EXPROTOCOL_1_H7,199
#define VRV_TAG	13,396
#define PKTHEADEX_SIZE	14,423
#define SCAN_OK	24,790
#define SCAN_RUNSTATUS	25,812
#define SCAN_GETSETTING	26,858
#define SCAN_NOTIFY	28,937
#define SCAN_CONNECT	30,1065
#define SCAN_RESOULT	31,1165
#define	STATUS_RUN	42,1574
#define STATUS_STOP	43,1608
#define STATUS_STARTSCAN	44,1643
#define STATUS_FINISHSCAN	45,1687
#define STATUS_SCANING	46,1732
#define NOTIFY_ATTACK	49,1793
#define NOTIFY_UNATTACK	50,1847
#define NOTIFY_MESSAGE	51,1909
#define NOTIFY_SETTING	52,1952
#define NOTIFY_INPUTNEWDEV 53,2004
#define CONNECT_READ	56,2084
#define CONNECT_WRITE	57,2122
struct PktHeadEx67,2499
	DWORD m_Flag;PktHeadEx::m_Flag69,2518
	WORD  m_Type;PktHeadEx::m_Type70,2563
	WORD  m_What;PktHeadEx::m_What71,2642
	DWORD m_Pwd;PktHeadEx::m_Pwd72,2673
	DWORD PktCrc;PktHeadEx::PktCrc73,2703
	DWORD PktLen;PktHeadEx::PktLen74,2743
	WORD  m_Tag;PktHeadEx::m_Tag75,2795
	WORD  m_Size;PktHeadEx::m_Size76,2828
	DWORD m_Address;PktHeadEx::m_Address77,2859

client_simulator/inc/ConvertUTF.h,532
typedef unsigned int	UTF32;90,3943
typedef unsigned short	UTF16;91,3994
typedef unsigned char	UTF8;92,4047
typedef unsigned char	Boolean;93,4098
#define UNI_REPLACEMENT_CHAR 96,4176
#define UNI_MAX_BMP 97,4223
#define UNI_MAX_UTF16 98,4261
#define UNI_MAX_UTF32 99,4301
#define UNI_MAX_LEGAL_UTF32 100,4341
	conversionOK,103,4403
	sourceExhausted,104,4448
	targetExhausted,105,4513
	sourceIllegal	106,4575
} ConversionResult;107,4634
	strictConversion 110,4670
	lenientConversion111,4693
} ConversionFlags;112,4712

client_simulator/inc/send_thread.h,28
#define SEND_THREAD_XX2,23

client_simulator/inc/Markup.h,10297
#define _MARKUP_H_INCLUDED_10,382
#define MARKUP_WINDOWS26,1152
#define MARKUP_STL39,1631
#define MARKUP_ICONV43,1809
#define MARKUP_WCHAR48,2000
#define MARKUP_MBCS51,2118
#define MARKUP_SIZEOFWCHAR 55,2260
#define MARKUP_SIZEOFWCHAR 57,2321
#define MARKUP_WINCONV61,2504
#define MARKUP_FILEBLOCKSIZE 64,2610
#define MCD_ACP 69,2734
#define MCD_UTF8 70,2753
#define MCD_UTF16 71,2777
#define MCD_UTF32 72,2801
#define MCD_CHAR 74,2853
#define MCD_PCSZ 75,2879
#define MCD_PSZLEN 76,2912
#define MCD_PSZCHR 77,2944
#define MCD_PSZSTR 78,2971
#define MCD_PSZTOL 79,2998
#define MCD_SSZ(81,3075
#define MCD_PSZCPY(82,3129
#define MCD_PSZNCPY(83,3179
#define MCD_SPRINTF 84,3235
#define MCD_FOPEN(85,3267
#define MCD_SSZ(88,3431
#define MCD_SSZ(90,3516
#define MCD_PSZCPY 92,3572
#define MCD_PSZNCPY 93,3599
#define MCD_SPRINTF 94,3628
#define MCD_FOPEN(95,3658
#define MCD_T(97,3732
#define MCD_ENC 99,3810
#define MCD_ENC 101,3874
#define MCD_CLEN(103,3915
#define MCD_CHAR 105,3965
#define MCD_PCSZ 106,3988
#define MCD_PSZLEN 107,4018
#define MCD_PSZCHR 108,4050
#define MCD_PSZSTR 109,4077
#define MCD_PSZTOL 110,4104
#define MCD_SSZ(112,4181
#define MCD_PSZCPY(113,4235
#define MCD_PSZNCPY(114,4285
#define MCD_SPRINTF 115,4341
#define MCD_FOPEN(116,4372
#define MCD_SSZ(118,4462
#define MCD_PSZCPY 119,4486
#define MCD_PSZNCPY 120,4513
#define MCD_SPRINTF 121,4542
#define MCD_FOPEN(122,4571
#define MCD_T(124,4643
#define MCD_ENC 126,4709
#define MCD_CLEN(128,4765
#define MCD_CLEN(130,4846
#define MCD_ENC 133,4946
#define MCD_CLEN(134,4978
#define MCD_STRERROR 138,5094
#define MCD_STR 147,5352
#define MCD_STR 149,5409
#define MCD_2PCSZ(151,5466
#define MCD_STRLENGTH(152,5498
#define MCD_STRCLEAR(153,5538
#define MCD_STRCLEARSIZE(154,5573
#define MCD_STRISEMPTY(155,5623
#define MCD_STRMID(156,5660
#define MCD_STRASSIGN(157,5701
#define MCD_STRCAPACITY(158,5745
#define MCD_STRINSERTREPLACE(159,5791
#define MCD_GETBUFFER(160,5847
#define MCD_RELEASEBUFFER(161,5937
#define MCD_BLDRESERVE(162,6008
#define MCD_BLDCHECK(163,6050
#define MCD_BLDRELEASE(164,6081
#define MCD_BLDAPPENDN(165,6110
#define MCD_BLDAPPEND(166,6155
#define MCD_BLDAPPEND1(167,6195
#define MCD_BLDLEN(168,6241
#define MCD_BLDTRUNC(169,6278
#define MCD_STR 173,6453
#define MCD_2PCSZ(174,6478
#define MCD_STRLENGTH(175,6514
#define MCD_STRCLEAR(176,6554
#define MCD_STRCLEARSIZE(177,6589
#define MCD_STRISEMPTY(178,6630
#define MCD_STRMID(179,6669
#define MCD_STRASSIGN(180,6707
#define MCD_STRCAPACITY(181,6803
#define MCD_GETBUFFER(182,6879
#define MCD_RELEASEBUFFER(183,6922
#define MCD_BLDRESERVE(184,6975
#define MCD_BLDCHECK(185,7041
#define MCD_BLDRELEASE(186,7134
#define MCD_BLDAPPENDN(187,7181
#define MCD_BLDAPPEND(188,7243
#define MCD_BLDAPPEND1(189,7311
#define MCD_BLDLEN(190,7363
#define MCD_BLDTRUNC(191,7389
#define MCD_STRTOINT(193,7440
struct MCD_CSTR196,7577
	MCD_CSTR(198,7597
	MCD_CSTR(199,7626
	MCD_CSTR(200,7664
	operator MCD_PCSZ(201,7721
	MCD_PCSZ pcsz;202,7767
#undef MCD_FOPEN207,7900
#define MCD_FOPEN(208,7918
#define MCD_T_FILENAME(209,7957
#define MCD_PCSZ_FILENAME 210,7986
struct MCD_CSTR_FILENAME211,8025
	MCD_CSTR_FILENAME(213,8054
	MCD_CSTR_FILENAME(214,8092
	MCD_CSTR_FILENAME(215,8148
	operator MCD_PCSZ_FILENAME(216,8215
	MCD_PCSZ_FILENAME pcsz;217,8270
#define MCD_CSTR_FILENAME 220,8325
#define MCD_T_FILENAME 221,8361
#define MCD_PCSZ_FILENAME 222,8391
#define MCD_FSEEK 227,8565
#define MCD_FTELL 228,8591
#define MCD_INTFILEOFFSET 229,8617
#define MCD_FSEEK 235,8892
#define MCD_FTELL 236,8921
#define MCD_INTFILEOFFSET 237,8950
#define MCD_FSEEK 239,9033
#define MCD_FTELL 240,9058
#define MCD_INTFILEOFFSET 241,9083
#define MCD_EOL 246,9252
#define MCD_EOL 248,9362
#define MCD_EOL 250,9443
#define MCD_EOL 252,9551
#define MCD_EOL 254,9632
#define MCD_EOLLEN 256,9712
class CMarkup265,9917
	CMarkup(CMarkup::CMarkup268,9944
	CMarkup(CMarkup::CMarkup269,9993
	CMarkup(CMarkup::CMarkup270,10059
	CMarkup(CMarkup::CMarkup271,10142
	void ResetChildPos(CMarkup::ResetChildPos284,10553
	void ResetMainPos(CMarkup::ResetMainPos285,10614
	void ResetPos(CMarkup::ResetPos286,10669
	MCD_STR GetChildTagName(CMarkup::GetChildTagName288,10739
	MCD_STR GetData(CMarkup::GetData289,10812
	MCD_STR GetChildData(CMarkup::GetChildData290,10863
	MCD_STR GetElemContent(CMarkup::GetElemContent291,10924
	MCD_STR GetAttrib(CMarkup::GetAttrib292,10995
	MCD_STR GetChildAttrib(CMarkup::GetChildAttrib293,11084
	int GetNodeType(CMarkup::GetNodeType297,11329
	const MCD_STR& GetResult(CMarkup::GetResult302,11575
	int GetDocFlags(CMarkup::GetDocFlags303,11635
	void SetDocFlags(CMarkup::SetDocFlags304,11686
	enum MarkupDocFlagsCMarkup::MarkupDocFlags305,11795
		MDF_UTF16LEFILE CMarkup::MarkupDocFlags::MDF_UTF16LEFILE307,11821
		MDF_UTF8PREAMBLE CMarkup::MarkupDocFlags::MDF_UTF8PREAMBLE308,11845
		MDF_IGNORECASE CMarkup::MarkupDocFlags::MDF_IGNORECASE309,11870
		MDF_READFILE CMarkup::MarkupDocFlags::MDF_READFILE310,11893
		MDF_WRITEFILE CMarkup::MarkupDocFlags::MDF_WRITEFILE311,11915
		MDF_APPENDFILE CMarkup::MarkupDocFlags::MDF_APPENDFILE312,11938
		MDF_UTF16BEFILE CMarkup::MarkupDocFlags::MDF_UTF16BEFILE313,11962
		MDF_TRIMWHITESPACE CMarkup::MarkupDocFlags::MDF_TRIMWHITESPACE314,11988
		MDF_COLLAPSEWHITESPACE CMarkup::MarkupDocFlags::MDF_COLLAPSEWHITESPACE315,12017
	enum MarkupNodeFlagsCMarkup::MarkupNodeFlags317,12054
		MNF_WITHCDATA CMarkup::MarkupNodeFlags::MNF_WITHCDATA319,12081
		MNF_WITHCDATA      = 0x01,CMarkup::MarkupNodeFlags::x01319,12081
		MNF_WITHNOLINES CMarkup::MarkupNodeFlags::MNF_WITHNOLINES320,12111
		MNF_WITHNOLINES    = 0x02,CMarkup::MarkupNodeFlags::x02320,12111
		MNF_WITHXHTMLSPACE CMarkup::MarkupNodeFlags::MNF_WITHXHTMLSPACE321,12141
		MNF_WITHXHTMLSPACE = 0x04,CMarkup::MarkupNodeFlags::x04321,12141
		MNF_WITHREFS CMarkup::MarkupNodeFlags::MNF_WITHREFS322,12171
		MNF_WITHREFS       = 0x08,CMarkup::MarkupNodeFlags::x08322,12171
		MNF_WITHNOEND CMarkup::MarkupNodeFlags::MNF_WITHNOEND323,12201
		MNF_WITHNOEND      = 0x10,CMarkup::MarkupNodeFlags::x10323,12201
		MNF_ESCAPEQUOTES CMarkup::MarkupNodeFlags::MNF_ESCAPEQUOTES324,12231
		MNF_ESCAPEQUOTES  = 0x100,CMarkup::MarkupNodeFlags::x100324,12231
		MNF_NONENDED CMarkup::MarkupNodeFlags::MNF_NONENDED325,12261
		MNF_NONENDED   = 0x100000,CMarkup::MarkupNodeFlags::x100000325,12261
		MNF_ILLDATA CMarkup::MarkupNodeFlags::MNF_ILLDATA326,12291
		MNF_ILLDATA    = 0x200000CMarkup::MarkupNodeFlags::x200000326,12291
	enum MarkupNodeTypeCMarkup::MarkupNodeType328,12325
		MNT_ELEMENT	CMarkup::MarkupNodeType::MNT_ELEMENT330,12351
		MNT_TEXT	CMarkup::MarkupNodeType::MNT_TEXT331,12388
		MNT_WHITESPACE	CMarkup::MarkupNodeType::MNT_WHITESPACE332,12422
		MNT_TEXT_AND_WHITESPACE CMarkup::MarkupNodeType::MNT_TEXT_AND_WHITESPACE333,12461
		MNT_CDATA_SECTION	CMarkup::MarkupNodeType::MNT_CDATA_SECTION334,12510
		MNT_PROCESSING_INSTRUCTION	CMarkup::MarkupNodeType::MNT_PROCESSING_INSTRUCTION335,12551
		MNT_COMMENT	CMarkup::MarkupNodeType::MNT_COMMENT336,12599
		MNT_DOCUMENT_TYPE	CMarkup::MarkupNodeType::MNT_DOCUMENT_TYPE337,12636
		MNT_EXCLUDE_WHITESPACE	CMarkup::MarkupNodeType::MNT_EXCLUDE_WHITESPACE338,12677
		MNT_LONE_END_TAG	CMarkup::MarkupNodeType::MNT_LONE_END_TAG339,12722
		MNT_NODE_ERROR CMarkup::MarkupNodeType::MNT_NODE_ERROR340,12762
	const MCD_STR& GetDoc(CMarkup::GetDoc345,12875
	bool AddElem(CMarkup::AddElem346,12929
	bool InsertElem(CMarkup::InsertElem347,13044
	bool AddChildElem(CMarkup::AddChildElem348,13173
	bool InsertChildElem(CMarkup::InsertChildElem349,13303
	bool AddElem(CMarkup::AddElem350,13447
	bool InsertElem(CMarkup::InsertElem351,13552
	bool AddChildElem(CMarkup::AddChildElem352,13671
	bool InsertChildElem(CMarkup::InsertChildElem353,13791
	bool AddAttrib(CMarkup::AddAttrib354,13925
	bool AddChildAttrib(CMarkup::AddChildAttrib355,14031
	bool AddAttrib(CMarkup::AddAttrib356,14147
	bool AddChildAttrib(CMarkup::AddChildAttrib357,14246
	bool AddSubDoc(CMarkup::AddSubDoc358,14355
	bool InsertSubDoc(CMarkup::InsertSubDoc359,14430
	MCD_STR GetSubDoc(CMarkup::GetSubDoc360,14517
	bool AddChildSubDoc(CMarkup::AddChildSubDoc361,14572
	bool InsertChildSubDoc(CMarkup::InsertChildSubDoc362,14660
	MCD_STR GetChildSubDoc(CMarkup::GetChildSubDoc363,14762
	bool AddNode(CMarkup::AddNode364,14827
	bool InsertNode(CMarkup::InsertNode365,14911
	bool SetAttrib(CMarkup::SetAttrib371,15089
	bool SetChildAttrib(CMarkup::SetChildAttrib372,15216
	bool SetAttrib(CMarkup::SetAttrib373,15353
	bool SetChildAttrib(CMarkup::SetChildAttrib374,15473
	bool SetData(CMarkup::SetData375,15603
	bool SetChildData(CMarkup::SetChildData376,15696
	bool SetData(CMarkup::SetData377,15799
	bool SetChildData(CMarkup::SetChildData378,15866
	bool SetElemContent(CMarkup::SetElemContent379,15943
	MCD_PCSZ m_pDebugCur;CMarkup::m_pDebugCur402,17418
	MCD_PCSZ m_pDebugPos;CMarkup::m_pDebugPos403,17442
	MCD_STR m_strDoc;CMarkup::m_strDoc406,17485
	MCD_STR m_strResult;CMarkup::m_strResult407,17505
	int m_iPosParent;CMarkup::m_iPosParent409,17530
	int m_iPos;CMarkup::m_iPos410,17550
	int m_iPosChild;CMarkup::m_iPosChild411,17564
	int m_iPosFree;CMarkup::m_iPosFree412,17583
	int m_iPosDeleted;CMarkup::m_iPosDeleted413,17601
	int m_nNodeType;CMarkup::m_nNodeType414,17622
	int m_nNodeOffset;CMarkup::m_nNodeOffset415,17641
	int m_nNodeLength;CMarkup::m_nNodeLength416,17662
	int m_nDocFlags;CMarkup::m_nDocFlags417,17683
	FilePos* m_pFilePos;CMarkup::m_pFilePos419,17704
	SavedPosMapArray* m_pSavedPosMaps;CMarkup::m_pSavedPosMaps420,17727
	ElemPosTree* m_pElemPosTree;CMarkup::m_pElemPosTree421,17764
	enum MarkupNodeFlagsInternalCMarkup::MarkupNodeFlagsInternal423,17797
		MNF_INSERT CMarkup::MarkupNodeFlagsInternal::MNF_INSERT425,17832
		MNF_INSERT     = 0x002000,CMarkup::MarkupNodeFlagsInternal::x002000425,17832
		MNF_CHILD CMarkup::MarkupNodeFlagsInternal::MNF_CHILD426,17862
		MNF_CHILD      = 0x004000CMarkup::MarkupNodeFlagsInternal::x004000426,17862
#define MARKUP_SETDEBUGSTATE 431,17955
#define MARKUP_SETDEBUGSTATE433,18023

client_simulator/inc/VrvProtocol.h,539
#define _VrvProtocol_H2,23
using namespace std;4,64
#define ENC_VERSION1 10,163
    PktHead linux_head;14,246
	string linux_data;15,270
}Linux_Pkt;Linux_Pkt16,290
	class VRVPacket31,792
		PktHead head;VRVPacket::head34,821
		string m_data;VRVPacket::m_data35,837
	    Linux_Pkt linux_pkt;VRVPacket::linux_pkt37,885
		VRVPacket(VRVPacket::VRVPacket39,912
class VRVPacketEx53,1401
    PktHeadEx head;VRVPacketEx::head56,1429
    string m_data;VRVPacketEx::m_data57,1449
    VRVPacketEx(VRVPacketEx::VRVPacketEx64,1767

client_simulator/inc/CSoftInstallHelper.h,699
#define CSOFTINSTALLHELPER_H_9,113
struct  tag_SoftInstall 16,221
	std::string version tag_SoftInstall::version17,247
	std::string time tag_SoftInstall::time18,270
struct  tag_SoftInstallEx 22,343
	std::string name tag_SoftInstallEx::name23,371
	std::string version tag_SoftInstallEx::version24,391
	std::string time tag_SoftInstallEx::time25,414
	ins_soft_new ::ins_soft_new29,446
	ins_soft_del ::ins_soft_del30,467
	ins_soft_modify ::ins_soft_modify31,488
typedef std::map<std::string std::string40,635
typedef std::map<std::string ,tag_SoftInstall>  CSoftinstallmap 40,635
class CSoftInstallHelper 42,702
	CSoftinstallmap     m_newMap CSoftInstallHelper::m_newMap55,1066

client_simulator/inc/regesiter.h,29
#define REGESITER_H_XXX2,24

client_simulator/inc/VRVProtocol.hxx,11853
#define EXPROTOCOL_H7,194
    typedef __int32_t			    BOOL;13,284
    typedef char					CHAR;14,318
    typedef __int32_t				INT;15,345
    typedef __int32_t				LONG;16,375
    typedef unsigned short		    WORD;17,406
    typedef unsigned char		    UCHAR;18,444
    typedef __uint32_t			    UINT;19,482
    typedef __uint32_t		        ULONG;20,517
    typedef unsigned short		    USHORT;21,556
    typedef UCHAR				    BYTE;22,596
    typedef ULONG				    DWORD;23,627
    typedef 	DWORD* 				LPVOID 24,659
    typedef long					BOOL;27,717
    typedef char					CHAR;28,744
    typedef int					    INT;29,771
    typedef long					LONG;30,800
    typedef unsigned short		    WORD;31,827
    typedef unsigned char		    UCHAR;32,865
    typedef unsigned int			UINT;33,903
    typedef unsigned long		    ULONG;34,936
    typedef unsigned short		    USHORT;35,974
    typedef UCHAR				    BYTE;36,1014
    typedef ULONG				    DWORD;37,1045
    typedef 	DWORD* 				LPVOID 38,1077
#define TRUE	44,1166
#define FALSE	47,1202
#define EX_OK	53,1460
#define EX_FAIL	54,1490
#define REG_DEVICE_040726	55,1528
#define SCAN_RESULT	56,1595
#define SCAN_ASK_050313	57,1688
#define SCAN_NEWIP 58,1763
#define SCAN_HACK_IP 59,1829
#define MODOULE_ECHO 60,1910
#define DEVICE_CHANGE_050313 61,1994
#define REG_CONFIG	62,2069
#define REG_TRANSFILE	63,2162
#define REG_TRANSFINISH	64,2253
#define TRANS_REG_DEVICE	66,2335
#define TRANS_SCAN_RESULT	67,2404
#define TRANS_DEVICE_CHANGE	68,2474
#define FIND_DAILUP_050103	70,2547
#define TRANS_FIND_DAILUP	71,2622
#define VRV_UPGRADE	72,2717
#define AGENT_PROCESS	73,2759
#define TRANS_AGENT_PROCESS	74,2843
#define SCAN_CONFIG_050313	75,2952
#define SCAN_REQUEST_050413	76,3055
#define TRANS_SCAN_REQUEST 77,3130
#define DETECT_ACTIVE	78,3229
#define	SCAN_GETCHANGE	79,3314
#define	AGENT_GETCONFIG	80,3412
#define	AGENT_RPTSTATUS_050103	81,3517
#define DISTRIBUTE_SOFTWARE	82,3603
#define APPLET_GETSQLCFG	83,3651
#define	REPORT_DOWNPATCH	84,3705
#define	REPORT_SYSTEMPATCH	85,3787
#define	REPORT_SOFTWARE	86,3840
#define	REPORT_VIRUS	87,3891
#define SCAN_NEWDEVICE	88,3933
#define AGENT_DOWNLOAD	89,3998
#define GET_FILEATTRIBUTE	90,4048
#define AGENT_RPTKVS_050313	91,4100
#define REG_DEVICE	92,4154
#define GET_AGENTPROCESS	93,4213
#define	KILL_AGENTPROCESS	94,4267
#define	GET_PATCH	95,4319
#define SENDREG_MESSAGE	96,4368
#define AGENT_GET_TASK	97,4431
#define LOWERDEPT_DOWNLOAD	98,4505
#define AGENT_RPTDEVEX_050622	99,4558
#define AGENT_RPTNOINSPATCH	100,4625
#define AGENT_RPTPATCHSTATUS	101,4685
#define DETECTAGENT_ISACTIVE	102,4796
#define GET_AGENTLOG	103,4942
#define FIND_DAILUP	104,5014
#define	AGENT_RPTSTATUS	105,5080
#define DISTRIBUTE_POLICY	112,5414
#define DOWNLOAD_POLICY	113,5460
#define DEVICE_CHANGE	114,5505
#define SCAN_REQUEST	115,5568
#define SCAN_ASK	116,5657
#define SCAN_CONFIG	117,5720
#define AGENT_RPTKVS	118,5818
#define AGENT_RPTAUDITLOG	119,5866
#define AGENT_RPTFLUX	120,5918
#define REG_DEVICE_STRING	121,5961
#define REG_TRANSFILE_STRING	122,5992
#define REG_TRANSFINISH_STRING	123,6025
#define T_POLICY_IFCHANGED 128,6237
#define T_REPORT_POLICYLOG 129,6299
#define T_REQUEST_DISCON 130,6368
#define T_REQUEST_SHUTDOWN 131,6430
#define T_POLICY_LOGDELETED 132,6489
#define T_WHOCAN_DISCON 133,6557
#define T_POINT_GET_CPU_MEM_INFO 135,6653
#define T_POINT_RUNEXE 136,6727
#define T_POINT_GET_IECACHE	137,6779
#define T_POINT_GET_SOFT_INFO	138,6830
#define T_POINT_CHANGE_IP	139,6886
#define T_POINT_GET_SERVICE	140,6941
#define T_POINT_GET_PORT	141,6995
#define T_POINT_GET_CAP	142,7046
#define T_POINT_GET_SHAREPATH	143,7097
#define T_POINT_MESSAGE	144,7130
#define T_POINT_KILLVIRUS	145,7178
#define T_POINT_DEBUGVRVEDP	146,7239
#define T_POINT_GET_FILE	147,7276
#define T_POINT_BATCH_PATCH	148,7310
#define T_POINT_USERGROUP	149,7347
#define T_POINT_WORKDIRECTORYPOLICY	150,7378
#define T_POINT_QUERYFILE	151,7419
#define T_POINT_QUERYPOLICY	152,7452
#define T_POINT_QUERYPATCHSTATE	153,7487
#define T_POINT_UNINSTALLSOFT	154,7525
#define AGENT_RCVMSGSUCCESS	164,8006
#define AGENT_RPTSOFTSTATUS	165,8072
#define AUTOLOAD_DETECTSTATUS	166,8138
#define AGENT_RPTDEVEX	167,8223
#define AGENT_SYNTIME	168,8285
#define WEB_UPLOAD_FILE	169,8334
#define IPORMAC_CHANGE	170,8412
#define AGENT_SCANRESOULT	171,8464
#define SCAN_FETCHCACHE	172,8543
#define AGENT_WARNING	173,8636
#define SCAN_NOTIFY	175,8705
#define	AGENT_ONLINETIME	179,9000
#define	AGENT_UPGRADE	180,9051
#define	AGENT_RPTRUNLEVEL	181,9118
#define	AGENT_RPTIDLESTATUS	182,9176
#define AGENT_DOWNLOADFILE	183,9236
#define AGENT_DOWNLOADFINISH	184,9289
#define AGENT_GETDOWNLOADLIST	185,9343
#define USB_AUTHENTICATION	186,9406
#define AGENT_UPLOADFILE	187,9451
#define REPORT_WARCENTER	188,9503
#define USB_ATCIONLOG	189,9567
#define AGENT_UPDATEONLYID	190,9621
#define DETECT_ENCRYPT	191,9677
#define AGENT_RPT_PROCESS	192,9734
#define AGENT_RPT_SOFTWARE	193,9781
#define AGENT_RPT_SYSTEMPATCH	194,9835
#define AGENT_GETCONFIG_STRING	195,9888
#define AGENT_RTP_AMTSTATUS	196,9923
#define AGENT_RPT_LONGINUSERS	197,9996
#define AGENT_RPT_IPMACBINDST	198,10073
#define AGENT_RPT_SHAREFOLDERS	199,10138
#define AGENT_REQUEST_UPDATE	204,10385
#define REG_AUTHENTICATION	207,10474
#define REG_LCS_AUTHENTICATION	208,10520
#define W_MAINDO_DISCON	211,10619
#define W_AGENTDO_DISCON	212,10672
#define DISCON_NORMAL_MODE 216,10862
#define DISCON_ALL_MODE 217,10935
#define DISCON_SUPER_MODE 218,11025
#define DISCON_DEFAULE_MODE	219,11230
#define W_POLICY_NOTCHANGED	222,11386
#define W_POLICY_CHANGED	223,11436
#define	CALL_STARTCLIENT	227,11553
#define	CALL_STARTSERVER	228,11608
#define CALL_MANAGER 229,11666
#define	CALL_STARTCLIENT2	230,11720
#define	CALL_STARTSERVER2	231,11777
#define CALL_MANAGER2 232,11837
#define REPORT_CLIENT_SYS_LOG_LINUX 235,11934
#define LOG_REPORT_STATE 237,11989
#define LOG_REFRESH 238,12082
#define LOG_APPEND 239,12127
#define Illegal_Behavior 244,12273
#define Abnormal_Behavior 245,12317
#define General_Behavior 246,12361
#define Event_Emergency 249,12448
#define Event_Alarm 250,12502
#define Event_Critical 251,12565
#define Event_Error 252,12622
#define Event_Caution 253,12679
#define Event_Inform 254,12736
#define Event_Message 255,12811
#define Event_Debug 256,12868
#define GETFORCEOUT_UPDATE	266,13247
#define ECHOFORCEOUT_UPDATE	267,13304
#define HACK_ARP 270,13375
#define HACK_DOWN 271,13438
#define HACK_ALLSTYLE 272,13489
#define FAIL_NOIPMALLOC	275,13552
#define FAIL_NETIPRESERVED	276,13600
#define FAIL_NETIPFORBID	277,13655
#define FAIL_SENDTOUPREG	278,13703
#define FAIL_COM_ERROR	279,13767
#define FAIL_UNKNOWN	280,13815
#define FAIL_LINCE_ERROR	281,13849
#define FAIL_LINCE_EMPTY	282,13895
#define IP_CHANGE	285,13951
#define MAC_CHANGE	286,13991
#define NAME_CHANGE	287,14033
#define ID_CHANGE	288,14079
#define MEM_CHANGE	289,14135
#define DISKSIZE_CHANGE	290,14184
#define	RUNLEVEL_CHANGE	291,14237
#define FIND_DAILUPING	293,14302
#define FIND_DAILUPED	294,14344
#define FIND_OUTOFNETWORK	295,14388
#define REQUEST_UPGRAD	298,14457
#define ECHO_UPGRAD	299,14499
#define FORCE_UPGRAD	300,14548
#define CONFIG_GET	303,14635
#define CONFIG_ECHO	304,14658
#define RESOULT_KILL	307,14733
#define RESOULT_SUCCESS	308,14760
#define RESOULT_REGISTERED	309,14790
#define RESOULT_FAIL	310,14822
#define RESOULT_CFGKILL	311,14849
#define RESOULT_KILLNOTIFY	312,14879
#define RESOULT_MANUAL	313,14911
#define RUN_ACTIVE	316,14996
#define RUN_SHUTDOWN	317,15019
#define AGENT_UNINSTALL	318,15043
#define AGENT_ACTIVE	319,15070
#define ATTACK_REQUEST	320,15094
#define DETECT_REQUEST	323,15259
#define DETECT_ECHO	324,15285
#define	AGENT_REQUEST	327,15401
#define AGENT_ECHO	328,15426
#define	STATUS_FINDOUT	331,15517
#define ATTACK_CHANGE	334,15581
#define DISTRIBUTE_FILE	338,15669
#define DISTRIBUTE_MSG	339,15713
#define DISTRIBUTE_SCRIPT	340,15756
#define TRANS_DATA	341,15801
#define TRANS_FINISH	342,15841
#define DISTRIBUTE_PATCH_PLOICY	343,15888
#define DISTRIBUTE_PATCH_FILE	344,15944
#define DISTRIBUTE_FILE_2	347,16077
#define DISTRIBUTE_MSG_2	348,16136
#define DISTRIBUTE_SCRIPT_2	349,16182
#define DISTRIBUTE_PATCH_PLOICY_2	350,16231
#define DISTRIBUTE_PATCH_FILE_2	351,16290
#define ERROR_OK	354,16364
#define	ERROR_CRC32	355,16390
#define	ERROR_PWD	356,16426
#define	APPLET_REQUEST	359,16508
#define APPLET_ECHO	360,16534
#define PATCH_REFRESH	363,16599
#define PATCH_ADDTAIL	364,16685
#define PATCH_DELETE	365,16719
#define SOFTWARE_REFRESH	368,16790
#define SOFTWARE_ADDTAIL	369,16879
#define SOFTWARE_DELETE	370,16916
#define NEWDEVICE_REQUEST	373,17029
#define NEWDEVICE_ECHO	374,17067
#define DOWNLOAD_REQUEST	377,17138
#define DOWNLOAD_OK	378,17175
#define DOWNLOAD_DATAERROR	379,17207
#define DOWNLOAD_RETRYLATER	380,17252
#define DOWNLOAD_REQUEST_2	381,17301
#define DOWNLOAD_IPLIST	382,17392
#define DOWNLOAD_FINISH	383,17440
#define DOWNLOAD_DISTRIBUTE	384,17495
#define FILEATTRIBUTE_REQUEST	387,17597
#define FILEATTRIBUTE_ECHO	388,17629
#define KVS_SHUTDOWN	391,17697
#define KVS_PROMPT	392,17743
#define KVS_CUTNET	393,17794
#define AGENTPROCESS_REQUEST 396,17852
#define AGENTPROCESS_ECHO	397,17892
#define TYPE_ERR_CONNECT	402,17995
#define TYPE_ERR_NOREPORT	403,18023
#define TYPE_ERR_DBNOINIT	404,18052
#define NOTIFY_COUNT	407,18115
#define NOTIFY_INOUT_SHUTDOWN	409,18171
#define NOTIFY_INOUT_PROMPT	410,18219
#define NOTIFY_INOUT_CHECK	411,18263
#define NOTIFY_INOUT_CUTNET	412,18330
#define NOTIFY_OUT_SHUTDOWN	414,18404
#define NOTIFY_OUT_PROMPT	415,18451
#define NOTIFY_OUT_CHECK	416,18493
#define NOTIFY_OUT_CUTNET	417,18555
#define NOTIFY_KVS_SHUTDOWN	419,18634
#define NOTIFY_KVS_PROMPT	420,18681
#define NOTIFY_KVS_CUTNET	421,18723
#define SCREEN_READONLY	424,18809
#define SCREEN_READWRITE	425,18858
#define _CONNECT_PROMPT	427,18903
#define _CONNECT_PASSWORD	428,18931
#define _CONNECT_AUTO	429,18960
#define LOG_ATTACK	432,19021
#define LOG_PATIOLATE	433,19045
#define LOG_SETTING	434,19071
#define LOG_PATCH	435,19096
#define LOG_NETWORKDATA	436,19119
#define LOG_HARDWARE	437,19147
#define LOG_SYSTEMLOG	438,19173
#define DETECT_POLICY	441,19232
#define GET_POLICY	442,19258
#define ECHO_POLICY	443,19282
#define LOWER_DETECT_POLICY	444,19307
#define LOWER_GET_POLICY	445,19338
#define AUDITLOG_REQUEST	448,19407
#define AUDITLOG_ECHO	449,19450
#define FLUX_REQUEST	452,19528
#define FLUX_ECHO	453,19567
#define FLUX_OVERLIMIT	454,19604
#define AUTOLOAD_REQUEST	457,19725
#define AUTOLOAD_ECHO	458,19767
#define GET_FILELIST	461,19872
#define UPLOAD_FILE	462,19926
#define UPLOAD_EXPORT_FILE	463,19965
#define USB_SUCCESS	466,20059
#define USB_FAILED	467,20083
#define USB_FAILED_ONUSER	468,20111
#define USB_FAILED_PASSERR	469,20144
#define USB_FAILED_DBERR	470,20178
#define DATA_PORT	491,20973
#define ALERT_PORT	492,21019
#define MANAGER_PORT 493,21066
#define SCANER_PORT 494,21145
#define MODOULE_PORT 495,21231
#define VRV_FLAG	496,21317
#define VRV_FLAG10	497,21353
#define VRV_FLAG11	498,21391
#define AGENT_VERSION	499,21429
#define VERSION_FLAG	500,21466
#define VRV_DOWNFLAG	501,21497
#define VRV_NOTIFY	502,21537
#define AUTOLOADECHO1_SIZE	503,21576
#define PKTHEAD_SIZE	504,21606
#define SCANRESOULT_SIZE	505,21631
#define SCANRESOULTEX_SIZE	506,21676
#define MAX_PKTHEAD_NUM	507,21725
#define SZ_DEVEX_1	508,21762
struct PktHead516,21913
	DWORD m_Flag;PktHead::m_Flag518,21930
	WORD  m_Type;PktHead::m_Type519,21964
	WORD  m_What;PktHead::m_What520,22041
	DWORD m_Pwd;PktHead::m_Pwd521,22070
	DWORD PktCrc;PktHead::PktCrc522,22084
	DWORD PktLen;PktHead::PktLen523,22099

client_simulator/inc/common.h,1444
#define COMMON_H_XXX2,21
#define ELPP_THREAD_SAFE21,376
#define ELPP_DISABLE_DEFAULT_CRASH_HANDLING24,409
#define ELPP_DEFAULT_LOG_FILE 26,483
#define STRITEM_TAG_END 33,591
#define IL 35,624
#define EL 37,680
#define PL 38,706
#define SM_LOG(40,734
#define SM_WARN(41,766
#define SM_ERROR(42,802
#define SM_POLICY(44,838
    SEND,48,890
    RECIVE,49,900
    NO_SUB_ACTION50,912
} SUB_ACTION;51,930
    REGESITER,54,960
    REPORT_ASSERT,55,975
    PULL_POLICY,56,994
    SEND_LOG,57,1011
    NO_ACTION58,1025
} ACTION;59,1039
typedef struct action 61,1050
    ACTION p;62,1074
    SUB_ACTION s;63,1088
} action_t;64,1106
typedef struct action_result 66,1119
    int ret;67,1150
    std::string reason;action_result::reason68,1163
    action_result(action_result::action_result69,1187
} action_result_t;73,1261
typedef struct clog_header 75,1281
    std::string time;clog_header::time76,1310
    action_t action;clog_header::action77,1332
    action_result_t result;clog_header::result78,1353
    std::string content;clog_header::content79,1381
    clog_header(clog_header::clog_header80,1406
} clog_header_t;84,1521
typedef struct network_info{network_info87,1540
	char ip[network_info::ip88,1569
	char mac[network_info::mac89,1583
	char gateway[network_info::gateway90,1598
	char sub_mask[network_info::sub_mask91,1617
	char eth_name[network_info::eth_name92,1637
} net_info;94,1680

client_simulator/inc/SimpleIni.h,12944
#define INCLUDED_SimpleIni_h195,10179
# define SI_ASSERT(230,11197
# define SI_ASSERT(232,11237
enum SI_Error 235,11267
    SI_OK 236,11283
    SI_UPDATED 237,11321
    SI_INSERTED 238,11380
    SI_FAIL 241,11485
    SI_NOMEM 242,11530
    SI_FILE 243,11579
#define SI_UTF8_SIGNATURE 246,11652
# define SI_NEWLINE_A 249,11712
# define SI_NEWLINE_W 250,11743
# define SI_NEWLINE_A 252,11792
# define SI_NEWLINE_W 253,11821
# define SI_HAS_WIDE_FILE261,11955
# define SI_WCHAR_T 262,11981
# define SI_HAS_WIDE_FILE264,12043
# define SI_WCHAR_T 265,12069
class CSimpleIniTempl293,13269
    typedef SI_CHAR SI_CHAR_T;CSimpleIniTempl::SI_CHAR_T296,13301
    struct Entry CSimpleIniTempl::Entry299,13354
        const SI_CHAR * pItem;CSimpleIniTempl::Entry::pItem300,13373
        const SI_CHAR * pComment;CSimpleIniTempl::Entry::pComment301,13404
        int             nOrder;CSimpleIniTempl::Entry::nOrder302,13438
        Entry(CSimpleIniTempl::Entry::Entry304,13471
        Entry(CSimpleIniTempl::Entry::Entry309,13640
        Entry(CSimpleIniTempl::Entry::Entry314,13836
        Entry & operator=(CSimpleIniTempl::Entry::operator=315,13889
        bool operator<(CSimpleIniTempl::Entry::operator<324,14210
        bool operator>(CSimpleIniTempl::Entry::operator>325,14294
        struct KeyOrder CSimpleIniTempl::Entry::KeyOrder329,14442
            bool operator()(CSimpleIniTempl::Entry::KeyOrder::operator()330,14511
        struct LoadOrder CSimpleIniTempl::Entry::LoadOrder337,14794
            bool operator()(CSimpleIniTempl::Entry::LoadOrder::operator()338,14864
    typedef std::multimap<Entry,CSimpleIniTempl::Entry348,15176
    typedef std::multimap<Entry,const SI_CHAR CSimpleIniTempl::SI_CHAR348,15176
    typedef std::multimap<Entry,const SI_CHAR *,typename Entry::KeyOrder> TKeyVal;CSimpleIniTempl::TKeyVal348,15176
    typedef std::map<Entry,CSimpleIniTempl::Entry351,15301
    typedef std::map<Entry,TKeyVal,CSimpleIniTempl::TKeyVal351,15301
    typedef std::map<Entry,TKeyVal,typename Entry::KeyOrder> TSection;CSimpleIniTempl::TSection351,15301
    typedef std::list<Entry> TNamesDepend;CSimpleIniTempl::TNamesDepend356,15500
    class OutputWriter CSimpleIniTempl::OutputWriter361,15672
        OutputWriter(CSimpleIniTempl::OutputWriter::OutputWriter363,15709
        virtual ~OutputWriter(CSimpleIniTempl::OutputWriter::~OutputWriter364,15736
    class FileWriter CSimpleIniTempl::FileWriter372,16042
        FILE * m_file;CSimpleIniTempl::FileWriter::m_file373,16087
        FileWriter(CSimpleIniTempl::FileWriter::FileWriter375,16122
        void Write(CSimpleIniTempl::FileWriter::Write376,16177
    class StringWriter CSimpleIniTempl::StringWriter385,16475
        std::string & m_string;CSimpleIniTempl::StringWriter::m_string386,16522
        StringWriter(CSimpleIniTempl::StringWriter::StringWriter388,16566
        void Write(CSimpleIniTempl::StringWriter::Write389,16636
    class StreamWriter CSimpleIniTempl::StreamWriter399,16974
        std::ostream & m_ostream;CSimpleIniTempl::StreamWriter::m_ostream400,17021
        StreamWriter(CSimpleIniTempl::StreamWriter::StreamWriter402,17067
        void Write(CSimpleIniTempl::StreamWriter::Write403,17141
    class Converter CSimpleIniTempl::Converter415,17539
        using SI_CONVERTER::SizeToStore;CSimpleIniTempl::Converter::SI_CONVERTER::SizeToStore417,17596
        Converter(CSimpleIniTempl::Converter::Converter418,17637
        Converter(CSimpleIniTempl::Converter::Converter421,17755
        Converter & operator=(CSimpleIniTempl::Converter::operator=422,17816
        bool ConvertToStore(CSimpleIniTempl::Converter::ConvertToStore426,17946
        const char * Data(CSimpleIniTempl::Converter::Data439,18433
        std::string m_scratch;CSimpleIniTempl::Converter::m_scratch441,18503
    bool IsEmpty(CSimpleIniTempl::IsEmpty466,19176
    void SetUnicode(CSimpleIniTempl::SetUnicode485,20157
    bool IsUnicode(CSimpleIniTempl::IsUnicode490,20310
    void SetMultiKey(CSimpleIniTempl::SetMultiKey510,21063
    bool IsMultiKey(CSimpleIniTempl::IsMultiKey515,21219
    void SetMultiLine(CSimpleIniTempl::SetMultiLine524,21617
    bool IsMultiLine(CSimpleIniTempl::IsMultiLine529,21773
    void SetSpaces(CSimpleIniTempl::SetSpaces537,22139
    bool UsingSpaces(CSimpleIniTempl::UsingSpaces542,22266
    SI_Error LoadData(CSimpleIniTempl::LoadData601,23867
    SI_Error Save(CSimpleIniTempl::Save720,28298
    SI_Error Save(CSimpleIniTempl::Save741,29041
    SI_Error SetValue(CSimpleIniTempl::SetValue965,39085
    Converter GetConverter(CSimpleIniTempl::GetConverter1097,45004
    inline bool IsSpace(CSimpleIniTempl::IsSpace1160,47701
    inline bool IsComment(CSimpleIniTempl::IsComment1165,47883
    inline void SkipNewLine(CSimpleIniTempl::SkipNewLine1171,48058
    bool IsLess(CSimpleIniTempl::IsLess1182,48504
    SI_CHAR * m_pData;CSimpleIniTempl::m_pData1209,49506
    size_t m_uDataLen;CSimpleIniTempl::m_uDataLen1215,49706
    const SI_CHAR * m_pFileComment;CSimpleIniTempl::m_pFileComment1218,49784
    TSection m_data;CSimpleIniTempl::m_data1221,49876
    TNamesDepend m_strings;CSimpleIniTempl::m_strings1227,50085
    bool m_bStoreIsUtf8;CSimpleIniTempl::m_bStoreIsUtf81230,50170
    bool m_bAllowMultiKey;CSimpleIniTempl::m_bAllowMultiKey1233,50255
    bool m_bAllowMultiLine;CSimpleIniTempl::m_bAllowMultiLine1236,50344
    bool m_bSpaces;CSimpleIniTempl::m_bSpaces1239,50442
    int m_nOrder;CSimpleIniTempl::m_nOrder1244,50599
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::CSimpleIniTempl(CSimpleIniTempl1252,50893
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::~CSimpleIniTempl(~CSimpleIniTempl1268,51311
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::Reset(Reset1275,51465
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadFile(LoadFile1298,52090
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadFile(LoadFile1319,52595
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadFile(LoadFile1344,53281
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadData(LoadData1384,54203
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadData(LoadData1461,56375
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::FindFileComment(FindFileComment1478,56780
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::FindEntry(FindEntry1505,57481
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::IsMultiLineTag(IsMultiLineTag1638,61288
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::IsMultiLineData(IsMultiLineData1651,61659
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::IsNewLineChar(IsNewLineChar1688,62390
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadMultiLineText(LoadMultiLineText1697,62596
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::CopyString(CopyString1821,66998
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::AddEntry(AddEntry1848,67713
        typedef typename TSection::iterator 1886,68997
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetValue(GetValue1953,71318
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetLongValue(GetLongValue1990,72380
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SetLongValue(SetLongValue2029,73584
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetDoubleValue(GetDoubleValue2061,74611
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SetDoubleValue(SetDoubleValue2092,75553
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetBoolValue(GetBoolValue2123,76443
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SetBoolValue(SetBoolValue2158,77500
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetAllValues(GetAllValues2184,78297
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetSectionSize(GetSectionSize2219,79343
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetSection(GetSection2254,80413
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetAllSections(GetAllSections2269,80779
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetAllKeys(GetAllKeys2282,81130
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SaveFile(SaveFile2313,81960
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SaveFile(SaveFile2333,82512
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SaveFile(SaveFile2359,83280
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::Save(Save2370,83551
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::OutputMultiLineText(OutputMultiLineText2497,87813
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::Delete(Delete2526,88761
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::DeleteString(DeleteString2586,90585
#  define SI_CONVERT_WIN322621,92093
#  define SI_CONVERT_GENERIC2623,92127
struct SI_GenericCase 2633,92368
    bool operator()(SI_GenericCase::operator()2634,92392
struct SI_GenericNoCase 2653,93040
    inline SI_CHAR locase(SI_GenericNoCase::locase2654,93066
    bool operator()(SI_GenericNoCase::operator()2657,93181
class SI_ConvertA 2673,93615
    bool m_bStoreIsUtf8;SI_ConvertA::m_bStoreIsUtf82674,93635
    SI_ConvertA(SI_ConvertA::SI_ConvertA2676,93671
    SI_ConvertA(SI_ConvertA::SI_ConvertA2678,93701
    SI_ConvertA(SI_ConvertA::SI_ConvertA2681,93806
    SI_ConvertA & operator=(SI_ConvertA::operator=2682,93867
    size_t SizeFromStore(SI_ConvertA::SizeFromStore2700,94829
    bool ConvertFromStore(SI_ConvertA::ConvertFromStore2724,95851
    size_t SizeToStore(SI_ConvertA::SizeToStore2748,96868
    bool ConvertToStore(SI_ConvertA::ConvertToStore2768,97745
#define SI_Case 2791,98484
#define SI_NoCase 2792,98519
class SI_ConvertW 2802,98765
    bool m_bStoreIsUtf8;SI_ConvertW::m_bStoreIsUtf82803,98785
    SI_ConvertW(SI_ConvertW::SI_ConvertW2805,98821
    SI_ConvertW(SI_ConvertW::SI_ConvertW2807,98851
    SI_ConvertW(SI_ConvertW::SI_ConvertW2810,98956
    SI_ConvertW & operator=(SI_ConvertW::operator=2811,99017
    size_t SizeFromStore(SI_ConvertW::SizeFromStore2829,99979
    bool ConvertFromStore(SI_ConvertW::ConvertFromStore2866,101589
    size_t SizeToStore(SI_ConvertW::SizeToStore2913,103740
    bool ConvertToStore(SI_ConvertW::ConvertToStore2946,105004
#define SI_Case 2999,107036
#define SI_NoCase 3000,107071
class SI_ConvertW 3008,107246
    const char * m_pEncoding;SI_ConvertW::m_pEncoding3009,107266
    UConverter * m_pConverter;SI_ConvertW::m_pConverter3010,107296
    SI_ConvertW(SI_ConvertW::SI_ConvertW3012,107338
    SI_ConvertW(SI_ConvertW::SI_ConvertW3014,107408
    SI_ConvertW(SI_ConvertW::SI_ConvertW3019,107560
    SI_ConvertW & operator=(SI_ConvertW::operator=3020,107621
    ~SI_ConvertW(SI_ConvertW::~SI_ConvertW3025,107772
    size_t SizeFromStore(SI_ConvertW::SizeFromStore3040,108667
    bool ConvertFromStore(SI_ConvertW::ConvertFromStore3079,110122
    size_t SizeToStore(SI_ConvertW::SizeToStore3116,111442
    bool ConvertToStore(SI_ConvertW::ConvertToStore3152,112744
#define SI_Case 3187,113664
#  define SI_NO_MBCS3192,113789
# define SI_NoCase 3198,113865
struct SI_NoCase 3210,114379
    bool operator()(SI_NoCase::operator()3211,114398
class SI_ConvertW 3232,115193
    UINT m_uCodePage;SI_ConvertW::m_uCodePage3233,115213
    SI_ConvertW(SI_ConvertW::SI_ConvertW3235,115246
    SI_ConvertW(SI_ConvertW::SI_ConvertW3237,115276
    SI_ConvertW(SI_ConvertW::SI_ConvertW3242,115409
    SI_ConvertW & operator=(SI_ConvertW::operator=3243,115470
    size_t SizeFromStore(SI_ConvertW::SizeFromStore3261,116426
    bool ConvertFromStore(SI_ConvertW::ConvertFromStore3287,117529
    size_t SizeToStore(SI_ConvertW::SizeToStore3310,118531
    bool ConvertToStore(SI_ConvertW::ConvertToStore3333,119500
typedef CSimpleIniTempl<char,char3353,120106
    SI_NoCase<SI_NoCase3354,120136
    SI_NoCase<char>,SI_ConvertA<char> >                 CSimpleIniA;3354,120136
typedef CSimpleIniTempl<char,char3355,120205
    SI_Case<SI_Case3356,120235
    SI_Case<char>,SI_ConvertA<char> >                   CSimpleIniCaseA;3356,120235
typedef CSimpleIniTempl<UChar,UChar3359,120337
    SI_NoCase<SI_NoCase3360,120368
    SI_NoCase<UChar>,SI_ConvertW<UChar> >               CSimpleIniW;3360,120368
typedef CSimpleIniTempl<UChar,UChar3361,120437
    SI_Case<SI_Case3362,120468
    SI_Case<UChar>,SI_ConvertW<UChar> >                 CSimpleIniCaseW;3362,120468
typedef CSimpleIniTempl<wchar_t,wchar_t3364,120547
    SI_NoCase<SI_NoCase3365,120580
    SI_NoCase<wchar_t>,SI_ConvertW<wchar_t> >           CSimpleIniW;3365,120580
typedef CSimpleIniTempl<wchar_t,wchar_t3366,120649
    SI_Case<SI_Case3367,120682
    SI_Case<wchar_t>,SI_ConvertW<wchar_t> >             CSimpleIniCaseW;3367,120682
# define CSimpleIni 3371,120779
# define CSimpleIniCase 3372,120816
# define SI_NEWLINE 3373,120857
# define CSimpleIni 3375,120914
# define CSimpleIniCase 3376,120951
# define SI_NEWLINE 3377,120992

client_simulator/inc/pull_policy.h,29
#define PULL_POLICY_XXX2,24

client_simulator/inc/old_functions.h,31
#define OLD_FUNCTIONS_XXX2,26

client_simulator/Makefile,12
CFLAGS 1,0

client_simulator/bin/myfile.ini,10
key 2,13

client_simulator/bin/clt_simulator.sh,64
function usage(2,13
function stop(6,215
function run(59,1097

lib_src/simpleini-4.17/README.md,484
simpleini1,0
const char * pVal 47,1985
SI_Error rc 56,2208
std::string strData;60,2296
rc 61,2317
CSimpleIniA::TNamesDepend sections;69,2458
CSimpleIniA::TNamesDepend keys;73,2554
const char * pszValue 81,2682
bool bHasMultipleValues;87,2907
pszValue 88,2932
    NULL /*default*/, &amp;bHasMultipleValues)89,2985
CSimpleIniA::TNamesDepend values;92,3082
CSimpleIniA::TNamesDepend::const_iterator i;99,3293
rc 109,3491
rc 116,3734
rc 122,3916
rc 144,4424
rc 148,4509

lib_src/simpleini-4.17/test1-input.ini,546
; The number after a section or key is the order that it is defined in this file3,86
; This comment should be joined on to the one below it about the key7,309
lonely-key key11,422
empty 15,497
test 41,968
test 43,987
test 45,1006
test 47,1025
; This looks like multi-line,line61,1234
; This looks like multi-line, but because the newline following the last61,1234
; line is discarded,62,1307
; If you wanted a multiline entry with a single line,67,1434
; If you wanted a multiline entry with a single line, you need to add 67,1434

lib_src/simpleini-4.17/ConvertUTF.h,532
typedef unsigned int	UTF32;90,3943
typedef unsigned short	UTF16;91,3994
typedef unsigned char	UTF8;92,4047
typedef unsigned char	Boolean;93,4098
#define UNI_REPLACEMENT_CHAR 96,4176
#define UNI_MAX_BMP 97,4223
#define UNI_MAX_UTF16 98,4261
#define UNI_MAX_UTF32 99,4301
#define UNI_MAX_LEGAL_UTF32 100,4341
	conversionOK,103,4403
	sourceExhausted,104,4448
	targetExhausted,105,4513
	sourceIllegal	106,4575
} ConversionResult;107,4634
	strictConversion 110,4670
	lenientConversion111,4693
} ConversionFlags;112,4712

lib_src/simpleini-4.17/simpleini.dsw,95
Microsoft Developer Studio Workspace File,1,0
Package=12,289
Package=20,408
Package=24,433

lib_src/simpleini-4.17/simpleini.doxy,26
DOXYFILE_ENCODING 23,962

lib_src/simpleini-4.17/testsi-UTF8.ini,33
; comments24,320
invalid27,353

lib_src/simpleini-4.17/LICENCE.txt,21
The MIT License 1,0

lib_src/simpleini-4.17/SimpleIni.sln,364
Microsoft Visual Studio Solution File,1,0
		{C23240A6-AA9D-4827-AF06-C98E97CA6DFB}.Debug.ActiveCfg ActiveCfg16,583
		{C23240A6-AA9D-4827-AF06-C98E97CA6DFB}.Debug Unicode.ActiveCfg ActiveCfg18,725
		{C23240A6-AA9D-4827-AF06-C98E97CA6DFB}.Release.ActiveCfg ActiveCfg20,899
		{C23240A6-AA9D-4827-AF06-C98E97CA6DFB}.Release Unicode.ActiveCfg ActiveCfg22,1049

lib_src/simpleini-4.17/Makefile,8
CC=1,0

lib_src/simpleini-4.17/SimpleIni.h,12944
#define INCLUDED_SimpleIni_h195,10179
# define SI_ASSERT(230,11197
# define SI_ASSERT(232,11237
enum SI_Error 235,11267
    SI_OK 236,11283
    SI_UPDATED 237,11321
    SI_INSERTED 238,11380
    SI_FAIL 241,11485
    SI_NOMEM 242,11530
    SI_FILE 243,11579
#define SI_UTF8_SIGNATURE 246,11652
# define SI_NEWLINE_A 249,11712
# define SI_NEWLINE_W 250,11743
# define SI_NEWLINE_A 252,11792
# define SI_NEWLINE_W 253,11821
# define SI_HAS_WIDE_FILE261,11955
# define SI_WCHAR_T 262,11981
# define SI_HAS_WIDE_FILE264,12043
# define SI_WCHAR_T 265,12069
class CSimpleIniTempl293,13269
    typedef SI_CHAR SI_CHAR_T;CSimpleIniTempl::SI_CHAR_T296,13301
    struct Entry CSimpleIniTempl::Entry299,13354
        const SI_CHAR * pItem;CSimpleIniTempl::Entry::pItem300,13373
        const SI_CHAR * pComment;CSimpleIniTempl::Entry::pComment301,13404
        int             nOrder;CSimpleIniTempl::Entry::nOrder302,13438
        Entry(CSimpleIniTempl::Entry::Entry304,13471
        Entry(CSimpleIniTempl::Entry::Entry309,13640
        Entry(CSimpleIniTempl::Entry::Entry314,13836
        Entry & operator=(CSimpleIniTempl::Entry::operator=315,13889
        bool operator<(CSimpleIniTempl::Entry::operator<324,14210
        bool operator>(CSimpleIniTempl::Entry::operator>325,14294
        struct KeyOrder CSimpleIniTempl::Entry::KeyOrder329,14442
            bool operator()(CSimpleIniTempl::Entry::KeyOrder::operator()330,14511
        struct LoadOrder CSimpleIniTempl::Entry::LoadOrder337,14794
            bool operator()(CSimpleIniTempl::Entry::LoadOrder::operator()338,14864
    typedef std::multimap<Entry,CSimpleIniTempl::Entry348,15176
    typedef std::multimap<Entry,const SI_CHAR CSimpleIniTempl::SI_CHAR348,15176
    typedef std::multimap<Entry,const SI_CHAR *,typename Entry::KeyOrder> TKeyVal;CSimpleIniTempl::TKeyVal348,15176
    typedef std::map<Entry,CSimpleIniTempl::Entry351,15301
    typedef std::map<Entry,TKeyVal,CSimpleIniTempl::TKeyVal351,15301
    typedef std::map<Entry,TKeyVal,typename Entry::KeyOrder> TSection;CSimpleIniTempl::TSection351,15301
    typedef std::list<Entry> TNamesDepend;CSimpleIniTempl::TNamesDepend356,15500
    class OutputWriter CSimpleIniTempl::OutputWriter361,15672
        OutputWriter(CSimpleIniTempl::OutputWriter::OutputWriter363,15709
        virtual ~OutputWriter(CSimpleIniTempl::OutputWriter::~OutputWriter364,15736
    class FileWriter CSimpleIniTempl::FileWriter372,16042
        FILE * m_file;CSimpleIniTempl::FileWriter::m_file373,16087
        FileWriter(CSimpleIniTempl::FileWriter::FileWriter375,16122
        void Write(CSimpleIniTempl::FileWriter::Write376,16177
    class StringWriter CSimpleIniTempl::StringWriter385,16475
        std::string & m_string;CSimpleIniTempl::StringWriter::m_string386,16522
        StringWriter(CSimpleIniTempl::StringWriter::StringWriter388,16566
        void Write(CSimpleIniTempl::StringWriter::Write389,16636
    class StreamWriter CSimpleIniTempl::StreamWriter399,16974
        std::ostream & m_ostream;CSimpleIniTempl::StreamWriter::m_ostream400,17021
        StreamWriter(CSimpleIniTempl::StreamWriter::StreamWriter402,17067
        void Write(CSimpleIniTempl::StreamWriter::Write403,17141
    class Converter CSimpleIniTempl::Converter415,17539
        using SI_CONVERTER::SizeToStore;CSimpleIniTempl::Converter::SI_CONVERTER::SizeToStore417,17596
        Converter(CSimpleIniTempl::Converter::Converter418,17637
        Converter(CSimpleIniTempl::Converter::Converter421,17755
        Converter & operator=(CSimpleIniTempl::Converter::operator=422,17816
        bool ConvertToStore(CSimpleIniTempl::Converter::ConvertToStore426,17946
        const char * Data(CSimpleIniTempl::Converter::Data439,18433
        std::string m_scratch;CSimpleIniTempl::Converter::m_scratch441,18503
    bool IsEmpty(CSimpleIniTempl::IsEmpty466,19176
    void SetUnicode(CSimpleIniTempl::SetUnicode485,20157
    bool IsUnicode(CSimpleIniTempl::IsUnicode490,20310
    void SetMultiKey(CSimpleIniTempl::SetMultiKey510,21063
    bool IsMultiKey(CSimpleIniTempl::IsMultiKey515,21219
    void SetMultiLine(CSimpleIniTempl::SetMultiLine524,21617
    bool IsMultiLine(CSimpleIniTempl::IsMultiLine529,21773
    void SetSpaces(CSimpleIniTempl::SetSpaces537,22139
    bool UsingSpaces(CSimpleIniTempl::UsingSpaces542,22266
    SI_Error LoadData(CSimpleIniTempl::LoadData601,23867
    SI_Error Save(CSimpleIniTempl::Save720,28298
    SI_Error Save(CSimpleIniTempl::Save741,29041
    SI_Error SetValue(CSimpleIniTempl::SetValue965,39085
    Converter GetConverter(CSimpleIniTempl::GetConverter1097,45004
    inline bool IsSpace(CSimpleIniTempl::IsSpace1160,47701
    inline bool IsComment(CSimpleIniTempl::IsComment1165,47883
    inline void SkipNewLine(CSimpleIniTempl::SkipNewLine1171,48058
    bool IsLess(CSimpleIniTempl::IsLess1182,48504
    SI_CHAR * m_pData;CSimpleIniTempl::m_pData1209,49506
    size_t m_uDataLen;CSimpleIniTempl::m_uDataLen1215,49706
    const SI_CHAR * m_pFileComment;CSimpleIniTempl::m_pFileComment1218,49784
    TSection m_data;CSimpleIniTempl::m_data1221,49876
    TNamesDepend m_strings;CSimpleIniTempl::m_strings1227,50085
    bool m_bStoreIsUtf8;CSimpleIniTempl::m_bStoreIsUtf81230,50170
    bool m_bAllowMultiKey;CSimpleIniTempl::m_bAllowMultiKey1233,50255
    bool m_bAllowMultiLine;CSimpleIniTempl::m_bAllowMultiLine1236,50344
    bool m_bSpaces;CSimpleIniTempl::m_bSpaces1239,50442
    int m_nOrder;CSimpleIniTempl::m_nOrder1244,50599
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::CSimpleIniTempl(CSimpleIniTempl1252,50893
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::~CSimpleIniTempl(~CSimpleIniTempl1268,51311
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::Reset(Reset1275,51465
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadFile(LoadFile1298,52090
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadFile(LoadFile1319,52595
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadFile(LoadFile1344,53281
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadData(LoadData1384,54203
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadData(LoadData1461,56375
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::FindFileComment(FindFileComment1478,56780
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::FindEntry(FindEntry1505,57481
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::IsMultiLineTag(IsMultiLineTag1638,61288
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::IsMultiLineData(IsMultiLineData1651,61659
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::IsNewLineChar(IsNewLineChar1688,62390
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::LoadMultiLineText(LoadMultiLineText1697,62596
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::CopyString(CopyString1821,66998
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::AddEntry(AddEntry1848,67713
        typedef typename TSection::iterator 1886,68997
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetValue(GetValue1953,71318
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetLongValue(GetLongValue1990,72380
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SetLongValue(SetLongValue2029,73584
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetDoubleValue(GetDoubleValue2061,74611
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SetDoubleValue(SetDoubleValue2092,75553
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetBoolValue(GetBoolValue2123,76443
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SetBoolValue(SetBoolValue2158,77500
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetAllValues(GetAllValues2184,78297
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetSectionSize(GetSectionSize2219,79343
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetSection(GetSection2254,80413
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetAllSections(GetAllSections2269,80779
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::GetAllKeys(GetAllKeys2282,81130
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SaveFile(SaveFile2313,81960
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SaveFile(SaveFile2333,82512
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::SaveFile(SaveFile2359,83280
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::Save(Save2370,83551
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::OutputMultiLineText(OutputMultiLineText2497,87813
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::Delete(Delete2526,88761
CSimpleIniTempl<SI_CHAR,SI_STRLESS,SI_CONVERTER>::DeleteString(DeleteString2586,90585
#  define SI_CONVERT_WIN322621,92093
#  define SI_CONVERT_GENERIC2623,92127
struct SI_GenericCase 2633,92368
    bool operator()(SI_GenericCase::operator()2634,92392
struct SI_GenericNoCase 2653,93040
    inline SI_CHAR locase(SI_GenericNoCase::locase2654,93066
    bool operator()(SI_GenericNoCase::operator()2657,93181
class SI_ConvertA 2673,93615
    bool m_bStoreIsUtf8;SI_ConvertA::m_bStoreIsUtf82674,93635
    SI_ConvertA(SI_ConvertA::SI_ConvertA2676,93671
    SI_ConvertA(SI_ConvertA::SI_ConvertA2678,93701
    SI_ConvertA(SI_ConvertA::SI_ConvertA2681,93806
    SI_ConvertA & operator=(SI_ConvertA::operator=2682,93867
    size_t SizeFromStore(SI_ConvertA::SizeFromStore2700,94829
    bool ConvertFromStore(SI_ConvertA::ConvertFromStore2724,95851
    size_t SizeToStore(SI_ConvertA::SizeToStore2748,96868
    bool ConvertToStore(SI_ConvertA::ConvertToStore2768,97745
#define SI_Case 2791,98484
#define SI_NoCase 2792,98519
class SI_ConvertW 2802,98765
    bool m_bStoreIsUtf8;SI_ConvertW::m_bStoreIsUtf82803,98785
    SI_ConvertW(SI_ConvertW::SI_ConvertW2805,98821
    SI_ConvertW(SI_ConvertW::SI_ConvertW2807,98851
    SI_ConvertW(SI_ConvertW::SI_ConvertW2810,98956
    SI_ConvertW & operator=(SI_ConvertW::operator=2811,99017
    size_t SizeFromStore(SI_ConvertW::SizeFromStore2829,99979
    bool ConvertFromStore(SI_ConvertW::ConvertFromStore2866,101589
    size_t SizeToStore(SI_ConvertW::SizeToStore2913,103740
    bool ConvertToStore(SI_ConvertW::ConvertToStore2946,105004
#define SI_Case 2999,107036
#define SI_NoCase 3000,107071
class SI_ConvertW 3008,107246
    const char * m_pEncoding;SI_ConvertW::m_pEncoding3009,107266
    UConverter * m_pConverter;SI_ConvertW::m_pConverter3010,107296
    SI_ConvertW(SI_ConvertW::SI_ConvertW3012,107338
    SI_ConvertW(SI_ConvertW::SI_ConvertW3014,107408
    SI_ConvertW(SI_ConvertW::SI_ConvertW3019,107560
    SI_ConvertW & operator=(SI_ConvertW::operator=3020,107621
    ~SI_ConvertW(SI_ConvertW::~SI_ConvertW3025,107772
    size_t SizeFromStore(SI_ConvertW::SizeFromStore3040,108667
    bool ConvertFromStore(SI_ConvertW::ConvertFromStore3079,110122
    size_t SizeToStore(SI_ConvertW::SizeToStore3116,111442
    bool ConvertToStore(SI_ConvertW::ConvertToStore3152,112744
#define SI_Case 3187,113664
#  define SI_NO_MBCS3192,113789
# define SI_NoCase 3198,113865
struct SI_NoCase 3210,114379
    bool operator()(SI_NoCase::operator()3211,114398
class SI_ConvertW 3232,115193
    UINT m_uCodePage;SI_ConvertW::m_uCodePage3233,115213
    SI_ConvertW(SI_ConvertW::SI_ConvertW3235,115246
    SI_ConvertW(SI_ConvertW::SI_ConvertW3237,115276
    SI_ConvertW(SI_ConvertW::SI_ConvertW3242,115409
    SI_ConvertW & operator=(SI_ConvertW::operator=3243,115470
    size_t SizeFromStore(SI_ConvertW::SizeFromStore3261,116426
    bool ConvertFromStore(SI_ConvertW::ConvertFromStore3287,117529
    size_t SizeToStore(SI_ConvertW::SizeToStore3310,118531
    bool ConvertToStore(SI_ConvertW::ConvertToStore3333,119500
typedef CSimpleIniTempl<char,char3353,120106
    SI_NoCase<SI_NoCase3354,120136
    SI_NoCase<char>,SI_ConvertA<char> >                 CSimpleIniA;3354,120136
typedef CSimpleIniTempl<char,char3355,120205
    SI_Case<SI_Case3356,120235
    SI_Case<char>,SI_ConvertA<char> >                   CSimpleIniCaseA;3356,120235
typedef CSimpleIniTempl<UChar,UChar3359,120337
    SI_NoCase<SI_NoCase3360,120368
    SI_NoCase<UChar>,SI_ConvertW<UChar> >               CSimpleIniW;3360,120368
typedef CSimpleIniTempl<UChar,UChar3361,120437
    SI_Case<SI_Case3362,120468
    SI_Case<UChar>,SI_ConvertW<UChar> >                 CSimpleIniCaseW;3362,120468
typedef CSimpleIniTempl<wchar_t,wchar_t3364,120547
    SI_NoCase<SI_NoCase3365,120580
    SI_NoCase<wchar_t>,SI_ConvertW<wchar_t> >           CSimpleIniW;3365,120580
typedef CSimpleIniTempl<wchar_t,wchar_t3366,120649
    SI_Case<SI_Case3367,120682
    SI_Case<wchar_t>,SI_ConvertW<wchar_t> >             CSimpleIniCaseW;3367,120682
# define CSimpleIni 3371,120779
# define CSimpleIniCase 3372,120816
# define SI_NEWLINE 3373,120857
# define CSimpleIni 3375,120914
# define CSimpleIniCase 3376,120951
# define SI_NEWLINE 3377,120992

lib_src/simpleini-4.17/package.cmd,17
set VERSION=1,0

lib_src/simpleini-4.17/test1-expected.ini,546
; The number after a section or key is the order that it is defined in this file3,86
; This comment should be joined on to the one below it about the key9,311
lonely-key key13,422
empty 17,497
test 46,965
test 49,985
test 52,1005
test 55,1025
; This looks like multi-line,line71,1248
; This looks like multi-line, but because the newline following the last71,1248
; line is discarded,72,1321
; If you wanted a multiline entry with a single line,75,1433
; If you wanted a multiline entry with a single line, you need to add 75,1433

lib_src/simpleini-4.17/ConvertUTF.c,837
static const int halfShift 47,1743
static const UTF32 halfBase 49,1813
static const UTF32 halfMask 50,1856
#define UNI_SUR_HIGH_START 52,1896
#define UNI_SUR_HIGH_END 53,1938
#define UNI_SUR_LOW_START 54,1980
#define UNI_SUR_LOW_END 55,2022
#define false	56,2064
#define true	57,2083
ConversionResult ConvertUTF32toUTF16 61,2180
ConversionResult ConvertUTF16toUTF32 110,3729
static const char trailingBytesForUTF8[trailingBytesForUTF8174,6033
static const UTF32 offsetsFromUTF8[offsetsFromUTF8190,6817
static const UTF8 firstByteMark[firstByteMark200,7297
ConversionResult ConvertUTF16toUTF8 214,7923
static Boolean isLegalUTF8(295,11059
Boolean isLegalUTF8Sequence(326,12118
ConversionResult ConvertUTF8toUTF16 336,12419
ConversionResult ConvertUTF32toUTF8 409,14838
ConversionResult ConvertUTF8toUTF32 462,16679

lib_src/simpleini-4.17/simpleini.dsp,11
CFG=7,232

lib_src/simpleini-4.17/ini.syn,221
; Suggested Colors:Colors3,66
;   Comments (;#)   Comments,4,86
;   Comments (;#)   Comments, Comments 2        Green4,86
;   Sections        Characters                  Red5,140
C=8,246
SingleCommentColAlt 27,519

lib_src/simpleini-4.17/testsi-EUCJP.ini,33
; comments24,311
invalid27,344

lib_src/simpleini-4.17/testsi.cpp,227
#define SI_SUPPORT_IOSTREAMS16,277
# define TCHAR 34,667
# define _T(35,692
# define _tprintf 36,714
# define _tmain 37,741
Test(41,796
TestStreams(147,4785
TestFile(180,5674
ParseCommandLine(233,7122
_tmain(280,8305

lib_src/simpleini-4.17/snippets.cpp,53
#define SI_SUPPORT_IOSTREAMS17,307
snippets(21,365

lib_src/simpleini-4.17/test1.cpp,354
# define DELETE_FILE 14,279
# define DELETE_FILE 17,339
#define SI_SUPPORT_IOSTREAMS21,394
class Test24,447
    std::string m_strTest;Test::m_strTest26,460
    Test(Test::Test29,496
    bool Success(Test::Success35,631
    bool Failure(Test::Failure41,744
bool FileComparisonTest(48,895
bool FileLoadTest(90,1844
bool TestStreams(115,2642

lib_src/simpleini-4.17/SimpleIni.vcproj,19
<?xml version=1,0

TAGS,81
function usage(3113,149578
function stop(3114,149599
function run(3115,149620

lib_src/simpleini-4.17/test.cmd,0

lib_src/simpleini-4.17/testsi-SJIS.ini,0

client_simulator/bin/run_simulator.sh,0
